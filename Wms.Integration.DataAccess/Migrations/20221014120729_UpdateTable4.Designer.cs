// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wms.Integration.DataAccess.Concrete.Contexts;

#nullable disable

namespace Wms.Integration.DataAccess.Migrations
{
    [DbContext(typeof(WMSContext))]
    [Migration("20221014120729_UpdateTable4")]
    partial class UpdateTable4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Wms.Integration.Core.Entities.Concrete.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("NVarChar");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Core.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .HasColumnType("NVarChar");

                    b.Property<string>("LastName")
                        .HasColumnType("NVarChar");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("VarBinary");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("VarBinary");

                    b.Property<bool>("Status")
                        .HasColumnType("Bit");

                    b.Property<string>("UserName")
                        .HasColumnType("NVarChar");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Core.Entities.Concrete.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("Int");

                    b.Property<int>("UserId")
                        .HasColumnType("Int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.AddressItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxQuantity")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("MinQuantity")
                        .HasColumnType("numeric(28,8)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<short>("PlacementPriority")
                        .HasColumnType("smallint");

                    b.Property<short>("ShipmentPriority")
                        .HasColumnType("smallint");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Active" }, "idx_AddressItem_Active");

                    b.HasIndex(new[] { "AddressId", "ItemId" }, "idx_AddressItem_Item");

                    b.ToTable("AddressItem", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Arp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Address1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Address2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("CardType")
                        .HasColumnType("smallint");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CityCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Contact")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Distance")
                        .HasColumnType("numeric(28,8)");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FaxNumber1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FaxNumber2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PhoneNumber1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaxOffice")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Town")
                        .HasMaxLength(51)
                        .HasColumnType("nvarchar(51)");

                    b.Property<string>("Url")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_Arp_Active");

                    b.HasIndex(new[] { "Code" }, "idx_Arp_Code");

                    b.HasIndex(new[] { "Code", "Title" }, "idx_Arp_Title");

                    b.ToTable("Arp", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Carrier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PhoneNumber1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_Carrier_Active");

                    b.HasIndex(new[] { "Code", "Description" }, "idx_Carrier_Description");

                    b.HasIndex(new[] { "Code" }, "uk_Carrier_Code")
                        .IsUnique();

                    b.ToTable("Carrier", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Container", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("ContainerTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Lpn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LPN");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PrintCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_Container_Active");

                    b.HasIndex(new[] { "ContainerTypeId" }, "idx_Container_Type");

                    b.HasIndex(new[] { "Lpn" }, "uk_Container_LPN")
                        .IsUnique();

                    b.ToTable("Container", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Decomposition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("Int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValue(new DateTime(2022, 10, 14, 15, 7, 28, 609, DateTimeKind.Local).AddTicks(5653));

                    b.Property<Guid>("DecompositionShelfId")
                        .HasColumnType("UniqueIdentifier");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("Bit");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("Int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("DecompositionShelfId");

                    b.ToTable("Decomposition", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.DecompositionLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("Int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("Int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValue(new DateTime(2022, 10, 14, 15, 7, 28, 609, DateTimeKind.Local).AddTicks(7697));

                    b.Property<Guid>("DecompositionShelvesId")
                        .HasColumnType("UniqueIdentifier");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("Int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("DateTime");

                    b.Property<int>("SlipLineId")
                        .HasColumnType("Int");

                    b.HasKey("Id");

                    b.HasIndex("DecompositionShelvesId");

                    b.HasIndex("SlipLineId");

                    b.ToTable("DecompositionLine", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.DecompositionShelf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("Int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("Int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValue(new DateTime(2022, 10, 14, 15, 7, 28, 609, DateTimeKind.Local).AddTicks(9926));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("NVarChar(250)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("Int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.ToTable("DecompositionShelf", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.DecompositionShelves", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("Int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValue(new DateTime(2022, 10, 14, 15, 7, 28, 610, DateTimeKind.Local).AddTicks(607));

                    b.Property<Guid>("DecompositionShelfId")
                        .HasColumnType("UniqueIdentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("NVarChar(250)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("Int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("DecompositionShelfId");

                    b.ToTable("DecompositionShelves", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("DocumentData")
                        .HasColumnType("varbinary(max)");

                    b.Property<short>("DocumentNumber")
                        .HasColumnType("smallint");

                    b.Property<short>("DocumentType")
                        .HasColumnType("smallint");

                    b.Property<string>("MimeType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("RecordId")
                        .HasColumnType("int");

                    b.Property<short>("RecordType")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("Thumbnail")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RecordType", "RecordId", "DocumentType" }, "idx_Document_TypeId");

                    b.ToTable("Document", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LicenseType")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Active" }, "idx_Driver_Active");

                    b.HasIndex(new[] { "Name", "Surname", "UserId" }, "idx_Driver_Name");

                    b.ToTable("Driver", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ErpinvTotal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CODE");

                    b.Property<decimal?>("Convfact1")
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("CONVFACT1");

                    b.Property<decimal?>("Convfact2")
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("CONVFACT2");

                    b.Property<string>("Expdate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EXPDATE");

                    b.Property<string>("Lineexp")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("LINEEXP");

                    b.Property<decimal?>("Onhand")
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("ONHAND");

                    b.Property<string>("Serilotn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SERILOTN");

                    b.Property<int?>("Stockref")
                        .HasColumnType("int")
                        .HasColumnName("STOCKREF");

                    b.Property<string>("Unitcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UNITCODE");

                    b.Property<int?>("Unitref")
                        .HasColumnType("int")
                        .HasColumnName("UNITREF");

                    b.Property<string>("Variantcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VARIANTCODE");

                    b.Property<int?>("Variantref")
                        .HasColumnType("int")
                        .HasColumnName("VARIANTREF");

                    b.HasKey("Id");

                    b.ToTable("ERPInvTotal", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.FormLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FormId")
                        .HasColumnType("int");

                    b.Property<short>("LayoutType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Settings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "RoleId", "UserId", "FormId", "ComponentId" }, "uk_FormLayout_RoleUser")
                        .IsUnique()
                        .HasFilter("[RoleId] IS NOT NULL AND [UserId] IS NOT NULL AND [FormId] IS NOT NULL AND [ComponentId] IS NOT NULL");

                    b.ToTable("FormLayout", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("ActionType")
                        .HasColumnType("smallint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RecordContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<short>("RecordType")
                        .HasColumnType("smallint");

                    b.Property<string>("TransactionGuid")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ActionType", "RecordType", "RecordId" }, "idx_History_TypeId");

                    b.ToTable("History", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.HistoryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FieldName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FieldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HistoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HistoryId", "FieldName" }, "idx_HistoryDetail_TypeId");

                    b.ToTable("HistoryDetail", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AbcClass")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("CanConfigure")
                        .HasColumnType("smallint");

                    b.Property<short>("CanDeduct")
                        .HasColumnType("smallint");

                    b.Property<short>("CardType")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<short>("ColdStorage")
                        .HasColumnType("smallint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("CriticalShelfLife")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("CriticalShipLife")
                        .HasColumnType("smallint");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomCode1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomCode2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomCode3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomCode4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomCode5")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeductCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<short>("ErpTrackingType")
                        .HasColumnType("smallint");

                    b.Property<string>("ExportClassNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GroupCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("InputOverageLimit")
                        .HasColumnType("numeric(28,8)");

                    b.Property<short>("InputOverageType")
                        .HasColumnType("smallint");

                    b.Property<string>("IsoNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ItemGroupCode")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ManufacturerCode")
                        .HasMaxLength(101)
                        .HasColumnType("nvarchar(101)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("NearTracking")
                        .HasColumnType("smallint");

                    b.Property<short>("NearTrackingDay")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("OutputOverageLimit")
                        .HasColumnType("numeric(28,8)");

                    b.Property<short>("OutputOverageType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ParentItemId")
                        .HasColumnType("int");

                    b.Property<short>("PurchDeductionPart1")
                        .HasColumnType("smallint");

                    b.Property<short>("PurchDeductionPart2")
                        .HasColumnType("smallint");

                    b.Property<short>("QualityControl")
                        .HasColumnType("smallint");

                    b.Property<short>("SaleDeductionPart1")
                        .HasColumnType("smallint");

                    b.Property<short>("SaleDeductionPart2")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("ShelfLife")
                        .HasColumnType("numeric(28,8)");

                    b.Property<short>("ShipmentLife")
                        .HasColumnType("smallint");

                    b.Property<int?>("SuppWarrantyPeriod")
                        .HasColumnType("int");

                    b.Property<short>("SupplyPeriod")
                        .HasColumnType("smallint");

                    b.Property<short>("TrackingMethod")
                        .HasColumnType("smallint");

                    b.Property<short>("TrackingType")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("VatRate")
                        .HasColumnType("numeric(28,8)");

                    b.Property<short>("WarrantyPeriod")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_Item_Active");

                    b.HasIndex(new[] { "Code", "Name" }, "idx_Item_Code");

                    b.HasIndex(new[] { "ParentItemId" }, "idx_Item_Parent");

                    b.ToTable("Item", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ItemClassRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex(new[] { "Active" }, "idx_ItemClassRelation_Active");

                    b.HasIndex(new[] { "ClassId", "ItemId" }, "uk_ItemClassRelation_ClassItem")
                        .IsUnique();

                    b.ToTable("ItemClassRelation", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ItemContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ParentItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal>("RateOfWaste")
                        .HasColumnType("numeric(28,8)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_ItemContent_Active");

                    b.HasIndex(new[] { "ItemId" }, "idx_ItemContent_Item");

                    b.HasIndex(new[] { "ParentItemId" }, "idx_ItemContent_Parent");

                    b.HasIndex(new[] { "UnitId" }, "idx_ItemContent_Unit");

                    b.ToTable("ItemContent", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ItemExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Skt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ItemExtras");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ItemParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AbcCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<short>("InputAction")
                        .HasColumnType("smallint");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<short>("MaxLevelAction")
                        .HasColumnType("smallint");

                    b.Property<decimal>("MaxQuantity")
                        .HasColumnType("numeric(28,8)");

                    b.Property<short>("MinLevelAction")
                        .HasColumnType("smallint");

                    b.Property<decimal>("MinQuantity")
                        .HasColumnType("numeric(28,8)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<short>("NegativeLevelAction")
                        .HasColumnType("smallint");

                    b.Property<short>("OutputAction")
                        .HasColumnType("smallint");

                    b.Property<short>("SafeLevelAction")
                        .HasColumnType("smallint");

                    b.Property<decimal>("SafeQuantity")
                        .HasColumnType("numeric(28,8)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex(new[] { "WarehouseId", "ItemId" }, "uk_ItemParameter_WhItem")
                        .IsUnique();

                    b.ToTable("ItemParameter", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ItemTotalsReportView", b =>
                {
                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ContainerId")
                        .HasColumnType("int");

                    b.Property<string>("DepoAdi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Depo Adi");

                    b.Property<string>("DepoKodu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Depo Kodu");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("MalzemeAdi")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Malzeme Adi");

                    b.Property<string>("MalzemeKodu")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)")
                        .HasColumnName("Malzeme Kodu");

                    b.Property<decimal?>("Rezerve")
                        .HasColumnType("numeric(38,6)");

                    b.Property<string>("SonKullanimTarihi")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Son Kullanim Tarihi");

                    b.Property<decimal?>("Stok")
                        .HasColumnType("numeric(38,6)");

                    b.Property<string>("TakipNumarasi")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Takip Numarasi");

                    b.Property<string>("TasimaKabiAciklamasi")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Tasima Kabi Aciklamasi");

                    b.Property<string>("TasimaKabiNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Tasima Kabi No");

                    b.Property<int?>("VariantId")
                        .HasColumnType("int");

                    b.Property<string>("VaryantAdı")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Varyant Adı");

                    b.Property<string>("VaryantKodu")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)")
                        .HasColumnName("Varyant Kodu");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.ToView("ItemTotalsReportView");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ItemTotalsView", b =>
                {
                    b.Property<decimal?>("ActualStock")
                        .HasColumnType("numeric(38,6)");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.ToView("ItemTotalsView");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ItemTrackingTotalsView", b =>
                {
                    b.Property<decimal?>("ActualStock")
                        .HasColumnType("numeric(38,6)");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.ToView("ItemTrackingTotalsView");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ItemUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("ConvFactor1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(28,8)")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("ConvFactor2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(28,8)")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("GrossVolume")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("GrossWeight")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("Height")
                        .HasColumnType("numeric(28,8)");

                    b.Property<short>("IsMasterUnit")
                        .HasColumnType("smallint");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric(28,8)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OldBarcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("ReceivePriority")
                        .HasColumnType("smallint");

                    b.Property<short>("ShipmentPriority")
                        .HasColumnType("smallint");

                    b.Property<short>("SlipPriority")
                        .HasColumnType("smallint");

                    b.Property<short>("UnitNumber")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric(28,8)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_ItemUnit_Active");

                    b.HasIndex(new[] { "ItemId", "Code" }, "idx_ItemUnit_Code");

                    b.ToTable("ItemUnit", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Logger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("Message1")
                        .HasMaxLength(250)
                        .HasColumnType("NVarChar(250)");

                    b.Property<string>("Message2")
                        .HasMaxLength(250)
                        .HasColumnType("NVarChar(250)");

                    b.Property<string>("MethodName")
                        .HasMaxLength(250)
                        .HasColumnType("NVarChar(250)");

                    b.Property<string>("ProjectName")
                        .HasMaxLength(250)
                        .HasColumnType("NVarChar(250)");

                    b.Property<string>("Statu")
                        .HasMaxLength(250)
                        .HasColumnType("NVarChar(250)");

                    b.HasKey("Id");

                    b.ToTable("Logger", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.LoginHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<short>("IsSuccess")
                        .HasColumnType("smallint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserName" }, "idx_LoginHistory_UserName");

                    b.ToTable("LoginHistory", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.OrderSlip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .HasColumnType("smallint");

                    b.Property<int?>("ArpId")
                        .HasColumnType("int");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CarrierId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerOrderNumber")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("DeliveryArpId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DeliveryType")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int?>("Department2Id")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Division2Id")
                        .HasColumnType("int");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("DocTrackingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Factory2Id")
                        .HasColumnType("int");

                    b.Property<int?>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PrintCount")
                        .HasColumnType("int");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint");

                    b.Property<int?>("ProdOrderLineId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesPersonId")
                        .HasColumnType("int");

                    b.Property<int?>("ShipmentAddressId")
                        .HasColumnType("int");

                    b.Property<short>("ShipmentStatus")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("SlipDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SlipNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("SlipType")
                        .HasColumnType("smallint");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("TradingGroupCode")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int?>("Warehouse2Id")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_OrderSlip_Active");

                    b.HasIndex(new[] { "ShipmentAddressId" }, "idx_OrderSlip_Address");

                    b.HasIndex(new[] { "ArpId" }, "idx_OrderSlip_Arp");

                    b.HasIndex(new[] { "CarrierId" }, "idx_OrderSlip_Carrier");

                    b.HasIndex(new[] { "DeliveryArpId" }, "idx_OrderSlip_DeliveryArp");

                    b.HasIndex(new[] { "DepartmentId" }, "idx_OrderSlip_Department");

                    b.HasIndex(new[] { "DivisionId" }, "idx_OrderSlip_Division");

                    b.HasIndex(new[] { "FactoryId" }, "idx_OrderSlip_Factory");

                    b.HasIndex(new[] { "ProjectId" }, "idx_OrderSlip_Project");

                    b.HasIndex(new[] { "SalesPersonId" }, "idx_OrderSlip_SalesPerson");

                    b.HasIndex(new[] { "StateId" }, "idx_OrderSlip_State");

                    b.HasIndex(new[] { "SlipType", "SlipNumber", "SlipDate" }, "idx_OrderSlip_TypeNumber");

                    b.HasIndex(new[] { "VehicleId" }, "idx_OrderSlip_Vehicle");

                    b.HasIndex(new[] { "WarehouseId" }, "idx_OrderSlip_Warehouse");

                    b.HasIndex(new[] { "Warehouse2Id" }, "idx_OrderSlip_Warehouse2");

                    b.ToTable("OrderSlip", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.OrderSlipLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ArpId")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Closed")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("ConvFactor1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(28,8)")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal?>("ConvFactor2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(28,8)")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Department2Id")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Division2Id")
                        .HasColumnType("int");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<short>("DocumentType")
                        .HasColumnType("smallint");

                    b.Property<int?>("Factory2Id")
                        .HasColumnType("int");

                    b.Property<int?>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LineDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyBarcode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(28,8)");

                    b.Property<int?>("ShipmentAddressId")
                        .HasColumnType("int");

                    b.Property<short>("ShipmentStatus")
                        .HasColumnType("smallint");

                    b.Property<int>("SlipId")
                        .HasColumnType("int");

                    b.Property<short>("SlipType")
                        .HasColumnType("smallint");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("VariantId")
                        .HasColumnType("int");

                    b.Property<int?>("Warehouse2Id")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_OrderSlipLine_Active");

                    b.HasIndex(new[] { "ArpId" }, "idx_OrderSlipLine_Arp");

                    b.HasIndex(new[] { "DepartmentId" }, "idx_OrderSlipLine_Department");

                    b.HasIndex(new[] { "ItemId" }, "idx_OrderSlipLine_Item");

                    b.HasIndex(new[] { "ProjectId" }, "idx_OrderSlipLine_Project");

                    b.HasIndex(new[] { "SlipId" }, "idx_OrderSlipLine_SlipId");

                    b.HasIndex(new[] { "StateId" }, "idx_OrderSlipLine_State");

                    b.HasIndex(new[] { "SlipType", "LineDate" }, "idx_OrderSlipLine_TypeDate");

                    b.HasIndex(new[] { "UnitId" }, "idx_OrderSlipLine_Unit");

                    b.HasIndex(new[] { "AssignedTo" }, "idx_OrderSlipLine_User");

                    b.HasIndex(new[] { "VariantId" }, "idx_OrderSlipLine_Variant");

                    b.HasIndex(new[] { "WarehouseId" }, "idx_OrderSlipLine_Warehouse");

                    b.HasIndex(new[] { "Warehouse2Id" }, "idx_OrderSlipLine_Warehouse2");

                    b.ToTable("OrderSlipLine", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.PlanningSlip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ArpId")
                        .HasColumnType("int");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CarrierId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DeliveryArpId")
                        .HasColumnType("int");

                    b.Property<int?>("Department2Id")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Division2Id")
                        .HasColumnType("int");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<int?>("Factory2Id")
                        .HasColumnType("int");

                    b.Property<int?>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PrintCount")
                        .HasColumnType("int");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint");

                    b.Property<int?>("SalesPersonId")
                        .HasColumnType("int");

                    b.Property<int?>("ShipmentAddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ShipmentDate")
                        .HasColumnType("datetime");

                    b.Property<short>("ShipmentStatus")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("SlipDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SlipNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("SlipType")
                        .HasColumnType("smallint");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int?>("Warehouse2Id")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_PlanningSlip_Active");

                    b.HasIndex(new[] { "ShipmentAddressId" }, "idx_PlanningSlip_Address");

                    b.HasIndex(new[] { "ArpId" }, "idx_PlanningSlip_Arp");

                    b.HasIndex(new[] { "DeliveryArpId" }, "idx_PlanningSlip_DeliveryArp");

                    b.HasIndex(new[] { "DepartmentId" }, "idx_PlanningSlip_Department");

                    b.HasIndex(new[] { "DivisionId" }, "idx_PlanningSlip_Division");

                    b.HasIndex(new[] { "DriverId" }, "idx_PlanningSlip_Driver");

                    b.HasIndex(new[] { "FactoryId" }, "idx_PlanningSlip_Factory");

                    b.HasIndex(new[] { "SalesPersonId" }, "idx_PlanningSlip_SalesPerson");

                    b.HasIndex(new[] { "StateId" }, "idx_PlanningSlip_State");

                    b.HasIndex(new[] { "SlipType", "SlipNumber", "SlipDate" }, "idx_PlanningSlip_TypeNumber");

                    b.HasIndex(new[] { "VehicleId" }, "idx_PlanningSlip_Vehicle");

                    b.HasIndex(new[] { "WarehouseId" }, "idx_PlanningSlip_Warehouse");

                    b.HasIndex(new[] { "Warehouse2Id" }, "idx_PlanningSlip_Warehouse2");

                    b.ToTable("PlanningSlip", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.PlanningSlipLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("Address2Id")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("ArpId")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Closed")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("ConvFactor1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(28,8)")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal?>("ConvFactor2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(28,8)")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Department2Id")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("Division2Id")
                        .HasColumnType("int");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<int?>("Factory2Id")
                        .HasColumnType("int");

                    b.Property<int?>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LineDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrderSlipId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderSlipLineId")
                        .HasColumnType("int");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(28,8)");

                    b.Property<int?>("ShipmentAddressId")
                        .HasColumnType("int");

                    b.Property<short>("ShipmentStatus")
                        .HasColumnType("smallint");

                    b.Property<int>("SlipId")
                        .HasColumnType("int");

                    b.Property<short>("SlipType")
                        .HasColumnType("smallint");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("VariantId")
                        .HasColumnType("int");

                    b.Property<int?>("Warehouse2Id")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_PlanningSlipLine_Active");

                    b.HasIndex(new[] { "AddressId" }, "idx_PlanningSlipLine_Address");

                    b.HasIndex(new[] { "Address2Id" }, "idx_PlanningSlipLine_Address2");

                    b.HasIndex(new[] { "ArpId" }, "idx_PlanningSlipLine_Arp");

                    b.HasIndex(new[] { "ItemId" }, "idx_PlanningSlipLine_Item");

                    b.HasIndex(new[] { "SlipId" }, "idx_PlanningSlipLine_SlipId");

                    b.HasIndex(new[] { "StateId" }, "idx_PlanningSlipLine_State");

                    b.HasIndex(new[] { "SlipType", "LineDate" }, "idx_PlanningSlipLine_TypeDate");

                    b.HasIndex(new[] { "UnitId" }, "idx_PlanningSlipLine_Unit");

                    b.HasIndex(new[] { "AssignedTo" }, "idx_PlanningSlipLine_User");

                    b.HasIndex(new[] { "VariantId" }, "idx_PlanningSlipLine_Variant");

                    b.HasIndex(new[] { "WarehouseId" }, "idx_PlanningSlipLine_Warehouse");

                    b.HasIndex(new[] { "Warehouse2Id" }, "idx_PlanningSlipLine_Warehouse2");

                    b.ToTable("PlanningSlipLine", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ProductionOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<short>("Approval")
                        .HasColumnType("smallint");

                    b.Property<int?>("ArpId")
                        .HasColumnType("int");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ConvFactor1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(28,8)")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("ConvFactor2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(28,8)")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<short>("MaterialPull")
                        .HasColumnType("smallint");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PauseDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PlannedEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PlannedStartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PlannedTime")
                        .HasColumnType("datetime");

                    b.Property<short>("ProductionStatus")
                        .HasColumnType("smallint");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(28,8)");

                    b.Property<DateTime>("SlipDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SlipNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("SlipType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_ProductionOrder_Active");

                    b.HasIndex(new[] { "ArpId" }, "idx_ProductionOrder_Arp");

                    b.HasIndex(new[] { "FactoryId" }, "idx_ProductionOrder_Factory");

                    b.HasIndex(new[] { "ItemId" }, "idx_ProductionOrder_Item");

                    b.HasIndex(new[] { "ProjectId" }, "idx_ProductionOrder_Project");

                    b.HasIndex(new[] { "SlipType", "SlipNumber", "SlipDate" }, "idx_ProductionOrder_TypeNumber");

                    b.HasIndex(new[] { "UnitId" }, "idx_ProductionOrder_Unit");

                    b.ToTable("ProductionOrder", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ProductionOrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ActualTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("ArpId")
                        .HasColumnType("int");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ConvFactor1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(28,8)")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("ConvFactor2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(28,8)")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("LineNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PlannedEndDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("PlannedQuantity")
                        .HasColumnType("numeric(28,8)");

                    b.Property<DateTime?>("PlannedStartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PlannedTime")
                        .HasColumnType("datetime");

                    b.Property<short>("ProductionStatus")
                        .HasColumnType("smallint");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SlipId")
                        .HasColumnType("int");

                    b.Property<short>("SlipType")
                        .HasColumnType("smallint");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArpId");

                    b.HasIndex("ProjectId");

                    b.HasIndex(new[] { "Id", "LineNumber" }, "idx_ProductionOrderLine1");

                    b.HasIndex(new[] { "Active" }, "idx_ProductionOrderLine_Active");

                    b.HasIndex(new[] { "ActualStartDate", "SlipType" }, "idx_ProductionOrderLine_Actual");

                    b.HasIndex(new[] { "FactoryId" }, "idx_ProductionOrderLine_Factory");

                    b.HasIndex(new[] { "ItemId" }, "idx_ProductionOrderLine_Item");

                    b.HasIndex(new[] { "PlannedStartDate", "SlipType" }, "idx_ProductionOrderLine_Planned");

                    b.HasIndex(new[] { "SlipId" }, "idx_ProductionOrderLine_SlipId");

                    b.HasIndex(new[] { "UnitId" }, "idx_ProductionOrderLine_Unit");

                    b.HasIndex(new[] { "VariantId" }, "idx_ProductionOrderLine_Variant");

                    b.ToTable("ProductionOrderLine", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomCode2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomCode3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomCode4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomCode5")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Responsible")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_Project_Active");

                    b.HasIndex(new[] { "Code" }, "idx_Project_Code");

                    b.HasIndex(new[] { "Code", "Name" }, "idx_Project_CodeName");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ReservationSlip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrderSlipId")
                        .HasColumnType("int");

                    b.Property<int?>("PlanningSlipId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SlipDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SlipNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("SlipType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_ReservationSlip_Active");

                    b.HasIndex(new[] { "SlipNumber", "SlipDate" }, "idx_ReservationSlip_Date");

                    b.HasIndex(new[] { "OrderSlipId" }, "idx_ReservationSlip_OrderSlip");

                    b.HasIndex(new[] { "PlanningSlipId" }, "idx_ReservationSlip_PlanningSlip");

                    b.HasIndex(new[] { "ProductionOrderId" }, "idx_ReservationSlip_ProdOrder");

                    b.HasIndex(new[] { "StateId" }, "idx_ReservationSlip_State");

                    b.HasIndex(new[] { "WorkOrderId" }, "idx_ReservationSlip_WorkOrder");

                    b.HasIndex(new[] { "SlipType", "SlipNumber" }, "uk_ReservationSlip_TypeNumber")
                        .IsUnique();

                    b.ToTable("ReservationSlip", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ReservationSlipLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ArpId")
                        .HasColumnType("int");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("BlockingTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ChildContainerId")
                        .HasColumnType("int");

                    b.Property<int?>("ContainerId")
                        .HasColumnType("int");

                    b.Property<decimal>("ConvFactor1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(28,8)")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("ConvFactor2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(28,8)")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LineDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrderSlipLineId")
                        .HasColumnType("int");

                    b.Property<int?>("PlanningSlipLineId")
                        .HasColumnType("int");

                    b.Property<int?>("ProdOrderLineId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric(28,8)");

                    b.Property<int>("SlipId")
                        .HasColumnType("int");

                    b.Property<short>("SlipType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("VariantId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkOrderLineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_ReservationSlipLine_Active");

                    b.HasIndex(new[] { "AddressId" }, "idx_ReservationSlipLine_Address");

                    b.HasIndex(new[] { "ArpId" }, "idx_ReservationSlipLine_Arp");

                    b.HasIndex(new[] { "BlockingTypeId" }, "idx_ReservationSlipLine_BlockingType");

                    b.HasIndex(new[] { "ChildContainerId" }, "idx_ReservationSlipLine_ChildContainer");

                    b.HasIndex(new[] { "ContainerId" }, "idx_ReservationSlipLine_Container");

                    b.HasIndex(new[] { "LineDate", "SlipType" }, "idx_ReservationSlipLine_DateType");

                    b.HasIndex(new[] { "ItemId" }, "idx_ReservationSlipLine_Item");

                    b.HasIndex(new[] { "OrderSlipLineId" }, "idx_ReservationSlipLine_OrderSlip");

                    b.HasIndex(new[] { "PlanningSlipLineId" }, "idx_ReservationSlipLine_PlanningSlip");

                    b.HasIndex(new[] { "ProdOrderLineId" }, "idx_ReservationSlipLine_ProdOrder");

                    b.HasIndex(new[] { "SlipId" }, "idx_ReservationSlipLine_SlipId");

                    b.HasIndex(new[] { "StateId" }, "idx_ReservationSlipLine_State");

                    b.HasIndex(new[] { "UnitId" }, "idx_ReservationSlipLine_Unit");

                    b.HasIndex(new[] { "VariantId" }, "idx_ReservationSlipLine_Variant");

                    b.HasIndex(new[] { "WarehouseId" }, "idx_ReservationSlipLine_Warehouse");

                    b.HasIndex(new[] { "WorkOrderLineId" }, "idx_ReservationSlipLine_WorkOrder");

                    b.ToTable("ReservationSlipLine", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SalesPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_SalesPerson_Active");

                    b.HasIndex(new[] { "Code" }, "idx_SalesPerson_Code");

                    b.HasIndex(new[] { "Code", "Name" }, "idx_SalesPerson_CodeName");

                    b.ToTable("SalesPerson", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FinishTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("ShiftDay")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Active" }, "idx_Shift_Active");

                    b.HasIndex(new[] { "Code", "Name" }, "idx_Shift_CodeName");

                    b.HasIndex(new[] { "Code" }, "uk_Shift_Code")
                        .IsUnique();

                    b.ToTable("Shift", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ShiftPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_ShiftPeriod_Active");

                    b.HasIndex(new[] { "ShiftId", "StartDate", "EndDate" }, "uk_ShiftPeriod_Date")
                        .IsUnique();

                    b.ToTable("ShiftPeriod", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ShipmentAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Address1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Address2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ArpId")
                        .HasColumnType("int");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CityCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("District")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DistrictCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FaxNumber1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FaxNumber2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PhoneNumber1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaxOffice")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Town")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TownCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TradingGroupCode")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Url")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_ShipmentAddress_Active");

                    b.HasIndex(new[] { "ArpId" }, "idx_ShipmentAddress_Arp");

                    b.HasIndex(new[] { "Code", "Title" }, "idx_ShipmentAddress_Code");

                    b.ToTable("ShipmentAddress", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ShipmentDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ArpId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FinishTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ShipmentAddressId")
                        .HasColumnType("int");

                    b.Property<short>("ShipmentDay1")
                        .HasColumnType("smallint")
                        .HasColumnName("ShipmentDay");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentAddressId");

                    b.HasIndex(new[] { "ArpId", "ShipmentAddressId" }, "idx_ShipmentDay_ArpAddress");

                    b.ToTable("ShipmentDay", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Slip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ArpId")
                        .HasColumnType("int");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CarrierId")
                        .HasColumnType("int");

                    b.Property<int?>("CompletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CustomSlipTypeId")
                        .HasColumnType("int");

                    b.Property<string>("DeclarationNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("DeliveryArpId")
                        .HasColumnType("int");

                    b.Property<int?>("Department2Id")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DispatchNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("Division2Id")
                        .HasColumnType("int");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<int?>("Factory2Id")
                        .HasColumnType("int");

                    b.Property<int?>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrderSlipId")
                        .HasColumnType("int");

                    b.Property<int?>("PlanningSlipId")
                        .HasColumnType("int");

                    b.Property<int>("PrintCount")
                        .HasColumnType("int");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint");

                    b.Property<int?>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesPersonId")
                        .HasColumnType("int");

                    b.Property<int?>("ShipmentAddressId")
                        .HasColumnType("int");

                    b.Property<string>("ShipmentNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("SlipDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SlipNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SlipSerialNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("SlipType")
                        .HasColumnType("smallint");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int?>("Warehouse2Id")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_Slip_Active");

                    b.HasIndex(new[] { "ShipmentAddressId" }, "idx_Slip_Address");

                    b.HasIndex(new[] { "ArpId" }, "idx_Slip_Arp");

                    b.HasIndex(new[] { "CustomSlipTypeId" }, "idx_Slip_CustomType");

                    b.HasIndex(new[] { "DeliveryArpId" }, "idx_Slip_DeliveryArp");

                    b.HasIndex(new[] { "DepartmentId" }, "idx_Slip_Department");

                    b.HasIndex(new[] { "DivisionId" }, "idx_Slip_Division");

                    b.HasIndex(new[] { "DriverId" }, "idx_Slip_Driver");

                    b.HasIndex(new[] { "FactoryId" }, "idx_Slip_Factory");

                    b.HasIndex(new[] { "OrderSlipId" }, "idx_Slip_OrderSlip");

                    b.HasIndex(new[] { "PlanningSlipId" }, "idx_Slip_PlanningSlip");

                    b.HasIndex(new[] { "ProductionOrderId" }, "idx_Slip_ProductionOrder");

                    b.HasIndex(new[] { "ProjectId" }, "idx_Slip_Project");

                    b.HasIndex(new[] { "SalesPersonId" }, "idx_Slip_SalesPerson");

                    b.HasIndex(new[] { "StateId" }, "idx_Slip_State");

                    b.HasIndex(new[] { "SlipType", "SlipDate" }, "idx_Slip_TypeDate");

                    b.HasIndex(new[] { "VehicleId" }, "idx_Slip_Vehicle");

                    b.HasIndex(new[] { "WarehouseId" }, "idx_Slip_Warehouse");

                    b.HasIndex(new[] { "Warehouse2Id" }, "idx_Slip_Warehouse2");

                    b.HasIndex(new[] { "WorkOrderId" }, "idx_Slip_WorkOrder");

                    b.HasIndex(new[] { "SlipType", "SlipNumber" }, "uk_Slip_TypeNumber")
                        .IsUnique();

                    b.ToTable("Slip", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SlipLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("Address2Id")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<short>("Approval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ArpId")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ChildContainer2Id")
                        .HasColumnType("int");

                    b.Property<int?>("ChildContainerId")
                        .HasColumnType("int");

                    b.Property<int?>("Container2Id")
                        .HasColumnType("int");

                    b.Property<int?>("ContainerId")
                        .HasColumnType("int");

                    b.Property<decimal>("ConvFactor1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(28,8)")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("ConvFactor2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(28,8)")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Department2Id")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Division2Id")
                        .HasColumnType("int");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<int?>("Factory2Id")
                        .HasColumnType("int");

                    b.Property<int?>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int?>("InsuranceDuration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InsuranceExpDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LineDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrderSlipLineId")
                        .HasColumnType("int");

                    b.Property<int?>("PlanningSlipLineId")
                        .HasColumnType("int");

                    b.Property<int?>("ProdOrderLineId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyBarcode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(28,8)");

                    b.Property<int?>("ShipmentAddressId")
                        .HasColumnType("int");

                    b.Property<int>("SlipId")
                        .HasColumnType("int");

                    b.Property<short>("SlipType")
                        .HasColumnType("smallint");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("VariantId")
                        .HasColumnType("int");

                    b.Property<int?>("Warehouse2Id")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("WorkOrderLineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_SlipLine_Active");

                    b.HasIndex(new[] { "AddressId" }, "idx_SlipLine_Address");

                    b.HasIndex(new[] { "Address2Id" }, "idx_SlipLine_Address2");

                    b.HasIndex(new[] { "ArpId" }, "idx_SlipLine_Arp");

                    b.HasIndex(new[] { "ChildContainerId" }, "idx_SlipLine_ChildContainer");

                    b.HasIndex(new[] { "ChildContainer2Id" }, "idx_SlipLine_ChildContainer2");

                    b.HasIndex(new[] { "ContainerId" }, "idx_SlipLine_Container");

                    b.HasIndex(new[] { "Container2Id" }, "idx_SlipLine_Container2");

                    b.HasIndex(new[] { "LineDate", "SlipType" }, "idx_SlipLine_DateType");

                    b.HasIndex(new[] { "ItemId" }, "idx_SlipLine_Item");

                    b.HasIndex(new[] { "OrderSlipLineId" }, "idx_SlipLine_OrderSlip");

                    b.HasIndex(new[] { "PlanningSlipLineId" }, "idx_SlipLine_PlanningSlip");

                    b.HasIndex(new[] { "ProdOrderLineId" }, "idx_SlipLine_ProdOrder");

                    b.HasIndex(new[] { "ProjectId" }, "idx_SlipLine_Project");

                    b.HasIndex(new[] { "SlipId" }, "idx_SlipLine_SlipId");

                    b.HasIndex(new[] { "StateId" }, "idx_SlipLine_State");

                    b.HasIndex(new[] { "UnitId" }, "idx_SlipLine_Unit");

                    b.HasIndex(new[] { "AssignedTo" }, "idx_SlipLine_User");

                    b.HasIndex(new[] { "VariantId" }, "idx_SlipLine_Variant");

                    b.HasIndex(new[] { "WarehouseId" }, "idx_SlipLine_Warehouse");

                    b.HasIndex(new[] { "Warehouse2Id" }, "idx_SlipLine_Warehouse2");

                    b.HasIndex(new[] { "WorkOrderLineId" }, "idx_SlipLine_WorkOrder");

                    b.ToTable("SlipLine", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("AddressType")
                        .HasColumnType("smallint");

                    b.Property<string>("Aisle")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("BlockId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Depth")
                        .HasColumnType("numeric(28,8)");

                    b.Property<int?>("FloorId")
                        .HasColumnType("int");

                    b.Property<string>("GpsAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("GroupCode")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<decimal?>("Height")
                        .HasColumnType("numeric(28,8)");

                    b.Property<string>("Latitude")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric(28,8)");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("Longitude")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<short>("PlacementPriority")
                        .HasColumnType("smallint");

                    b.Property<string>("RfId")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<short>("Shelf")
                        .HasColumnType("smallint");

                    b.Property<short>("ShipmentPriority")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("numeric(28,8)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric(28,8)");

                    b.Property<short>("Xcoord")
                        .HasColumnType("smallint")
                        .HasColumnName("XCoord");

                    b.Property<short>("Ycoord")
                        .HasColumnType("smallint")
                        .HasColumnName("YCoord");

                    b.Property<short>("Zcoord")
                        .HasColumnType("smallint")
                        .HasColumnName("ZCoord");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.HasIndex("ZoneId");

                    b.HasIndex(new[] { "Active" }, "idx_SysAddress_Active");

                    b.HasIndex(new[] { "WarehouseId", "FloorId", "Address" }, "uk_SysAddress_Address")
                        .IsUnique()
                        .HasFilter("[FloorId] IS NOT NULL AND [Address] IS NOT NULL");

                    b.ToTable("SysAddress", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysAuthCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<short>("Permission")
                        .HasColumnType("smallint");

                    b.Property<short>("RecordType")
                        .HasColumnType("smallint");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "RoleId", "UserId", "RecordType", "AuthCode" }, "uk_SysAuthCode_TypeCode")
                        .IsUnique()
                        .HasFilter("[RoleId] IS NOT NULL AND [UserId] IS NOT NULL AND [AuthCode] IS NOT NULL");

                    b.ToTable("SysAuthCode", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysBlockingException", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BlockingTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomSlipTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BlockingTypeId", "CustomSlipTypeId" }, "idx_SysBlockingException_Type");

                    b.ToTable("SysBlockingException", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysBlockingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_SysBlockingType_Active");

                    b.HasIndex(new[] { "Code" }, "uk_SysBlockingType_Code")
                        .IsUnique();

                    b.ToTable("SysBlockingType", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysContainerRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex(new[] { "ParentId", "ChildId" }, "uk_SysContainerRelation_ParentChild")
                        .IsUnique();

                    b.ToTable("SysContainerRelation", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysContainerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("DimensionWeight")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("Height")
                        .HasColumnType("numeric(28,8)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemsFilter")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric(28,8)");

                    b.Property<short>("LpncontainsDate")
                        .HasColumnType("smallint")
                        .HasColumnName("LPNContainsDate");

                    b.Property<short>("Lpnlength")
                        .HasColumnType("smallint")
                        .HasColumnName("LPNLength");

                    b.Property<string>("Lpnprefix")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LPNPrefix");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric(28,8)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_SysContainerType_Active");

                    b.HasIndex(new[] { "Code" }, "uk_SysContainerType_Code")
                        .IsUnique();

                    b.ToTable("SysContainerType", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysCustomCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("Backgroundcolor")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("CodeType")
                        .HasColumnType("smallint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ForegroundColor")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_SysCustomCode_Active");

                    b.HasIndex(new[] { "Code", "CodeType" }, "idx_SysCustomCode_CodeType");

                    b.ToTable("SysCustomCode", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysCustomListColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("MenuNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReportColumns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int");

                    b.Property<string>("ReportParameters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.HasIndex(new[] { "Active" }, "idx_SysCustomListColumn_Active");

                    b.HasIndex(new[] { "MenuNumber" }, "idx_SysCustomListColumn_MenuNumber")
                        .IsUnique();

                    b.ToTable("SysCustomListColumn", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysCustomReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("IsDefault")
                        .HasColumnType("smallint");

                    b.Property<int>("MenuNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("QueryContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ReportType")
                        .HasColumnType("smallint");

                    b.Property<short>("TemplateNumber")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_SysCustomReport_Active");

                    b.HasIndex(new[] { "ReportType" }, "idx_SysCustomReport_ReportType");

                    b.HasIndex(new[] { "Name" }, "uk_SysCustomReport_Name")
                        .IsUnique();

                    b.ToTable("SysCustomReport", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysCustomRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("AutoRun")
                        .HasColumnType("smallint");

                    b.Property<short>("AutoRunAction")
                        .HasColumnType("smallint");

                    b.Property<short>("AutoRunEvent")
                        .HasColumnType("smallint");

                    b.Property<short>("AutoRunObject")
                        .HasColumnType("smallint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("MenuBound")
                        .HasColumnType("smallint");

                    b.Property<short>("MenuContext")
                        .HasColumnType("smallint");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ScheduleDay")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<short>("ScheduleInterval")
                        .HasColumnType("smallint");

                    b.Property<string>("ScheduleMonth")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<short>("SchedulePeriod")
                        .HasColumnType("smallint");

                    b.Property<string>("ScheduleTime")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<short>("ScheduleType")
                        .HasColumnType("smallint");

                    b.Property<string>("ScheduleWeekDay")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<short>("Scheduled")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_SysCustomRule_Active");

                    b.HasIndex(new[] { "Name" }, "uk_SysCustomRule_Name")
                        .IsUnique();

                    b.ToTable("SysCustomRule", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysCustomRuleAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("ActionNumber")
                        .HasColumnType("smallint");

                    b.Property<short>("ActionType")
                        .HasColumnType("smallint");

                    b.Property<short>("IsRuleResult")
                        .HasColumnType("smallint");

                    b.Property<short>("PreAction")
                        .HasColumnType("smallint");

                    b.Property<short>("PreCondition")
                        .HasColumnType("smallint");

                    b.Property<int>("RuleId")
                        .HasColumnType("int");

                    b.Property<string>("Template")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RuleId", "ActionNumber" }, "uk_SysCustomRuleAction_IdNumber")
                        .IsUnique();

                    b.ToTable("SysCustomRuleAction", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysCustomSlipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<short>("ErpIntegration")
                        .HasColumnType("smallint");

                    b.Property<string>("ErpRecordTrCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("ErpRecordType")
                        .HasColumnType("smallint");

                    b.Property<short>("ErpSlipType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("SlipType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_SysCustomSlipType_Active");

                    b.ToTable("SysCustomSlipType", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysCustomState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<short>("IsDefault")
                        .HasColumnType("smallint");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<short>("RecordType")
                        .HasColumnType("smallint");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("StateNumber")
                        .HasColumnType("smallint");

                    b.Property<short>("SystemEvent")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_SysCustomState_Active");

                    b.HasIndex(new[] { "RecordType", "StateNumber" }, "uk_SysCustomState_TypeNumber")
                        .IsUnique();

                    b.ToTable("SysCustomState", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysCustomTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<short>("RecordType")
                        .HasColumnType("smallint");

                    b.Property<string>("TableDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_SysCustomTable_Active");

                    b.HasIndex(new[] { "TableName", "RecordType" }, "uk_SysCustomTable_TypeName")
                        .IsUnique();

                    b.ToTable("SysCustomTable", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_SysDepartment_Active");

                    b.HasIndex(new[] { "Code" }, "idx_SysDepartment_Code");

                    b.ToTable("SysDepartment", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysDivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_SysDivision_Active");

                    b.HasIndex(new[] { "Code" }, "idx_SysDivision_Code");

                    b.ToTable("SysDivision", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysErp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ApiUrl1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ApiUrl2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ApiUrl3")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("ConnectionType")
                        .HasColumnType("smallint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DbName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DbPassword")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("DbType")
                        .HasColumnType("smallint");

                    b.Property<string>("DbUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EndpointUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("ErpType")
                        .HasColumnType("smallint");

                    b.Property<string>("FirmNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Language")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LcnapiUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("LCNApiUrl");

                    b.Property<int>("Lcnport")
                        .HasColumnType("int")
                        .HasColumnName("LCNPort");

                    b.Property<string>("Lcnversion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LCNVersion");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<int>("TimeOut")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_SysErp_Active");

                    b.HasIndex(new[] { "ErpType", "Description", "ConnectionType" }, "uk_SysErp_ErpType")
                        .IsUnique();

                    b.ToTable("SysErp", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysErpFirm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ErpBranchNumber")
                        .HasColumnType("int");

                    b.Property<string>("ErpFirmName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ErpFirmNumber")
                        .HasColumnType("int");

                    b.Property<int>("ErpId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ParentFirmId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_SysErpFirm_Active");

                    b.HasIndex(new[] { "ErpId", "ErpFirmNumber", "ErpBranchNumber" }, "uk_SysErpFirm_ErpFirm")
                        .IsUnique()
                        .HasFilter("[ErpBranchNumber] IS NOT NULL");

                    b.ToTable("SysErpFirm", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysErpIntegration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ErpFirmId")
                        .HasColumnType("int");

                    b.Property<int>("ErpId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ErpModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ErpPeriodNumber")
                        .HasColumnType("int");

                    b.Property<string>("ErpRecordCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ErpRecordId")
                        .HasColumnType("int");

                    b.Property<string>("ErpRecordParameters")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ErpRecordTrCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("ErpRecordType")
                        .HasColumnType("smallint");

                    b.Property<int?>("ErpRelatedLineId")
                        .HasColumnType("int");

                    b.Property<int?>("ErpRelatedTransId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("IntegrationDate")
                        .HasColumnType("datetime");

                    b.Property<short>("IntegrationStatus")
                        .HasColumnType("smallint");

                    b.Property<short>("IsMasterRecord")
                        .HasColumnType("smallint");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<short>("RecordType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ErpFirmId");

                    b.HasIndex(new[] { "RecordType", "RecordId", "ErpFirmId" }, "idx_SysErpIntegration1");

                    b.HasIndex(new[] { "ErpId", "ErpFirmId" }, "idx_SysErpIntegration_Erp");

                    b.HasIndex(new[] { "RecordType", "RecordId" }, "idx_SysErpIntegration_Record");

                    b.ToTable("SysErpIntegration", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysFactory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_SysFactory_Active");

                    b.HasIndex(new[] { "Code" }, "idx_SysFactory_Code");

                    b.HasIndex(new[] { "DivisionId" }, "idx_SysFactory_Division");

                    b.ToTable("SysFactory", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Arguments")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ErpDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ErpFirmNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ErpId")
                        .HasColumnType("int");

                    b.Property<int?>("ErpPeriodBranch")
                        .HasColumnType("int");

                    b.Property<int?>("ErpRecordId")
                        .HasColumnType("int");

                    b.Property<string>("ErpRecordParameters")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ErpRecordType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Exception")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("IpAddressPort")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LogLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LogMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logger")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MethodName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProcessGroup")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("RecordType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskGuid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ThreadId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Logger", "LogDate", "LogLevel" }, "idx_SysLog_LoggerDateLevel");

                    b.ToTable("SysLog", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysMenuRight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<short>("OnlyOwnItems")
                        .HasColumnType("smallint");

                    b.Property<short>("OperationType")
                        .HasColumnType("smallint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId", "MenuId", "OperationType" }, "uk_SysMenuRight_RoleOp")
                        .IsUnique();

                    b.ToTable("SysMenuRight", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysNetLock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FormName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("RecordId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SessionCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex(new[] { "Active" }, "idx_SysNetLock_Active");

                    b.HasIndex(new[] { "FormName", "RecordId" }, "idx_SysNetLock_Form");

                    b.ToTable("SysNetLock", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ParameterNumber")
                        .HasColumnType("int");

                    b.Property<short>("ParameterType")
                        .HasColumnType("smallint");

                    b.Property<string>("ParameterTypeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParameterValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_SysParameter_Active");

                    b.HasIndex(new[] { "ParameterType", "ParameterTypeId", "ParameterNumber" }, "uk_SysParameter_TypeIdNumber")
                        .IsUnique()
                        .HasFilter("[ParameterTypeId] IS NOT NULL");

                    b.ToTable("SysParameter", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysPasswordHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId", "CreatedDate" }, "idx_SysPasswordHistory_UserDate");

                    b.ToTable("SysPasswordHistory", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysPasswordPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("FailedAttempts")
                        .HasColumnType("smallint");

                    b.Property<short>("MaximumAge")
                        .HasColumnType("smallint");

                    b.Property<short>("MinimumAge")
                        .HasColumnType("smallint");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordExpression")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("RememberCount")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_SysPasswordPolicy_Active");

                    b.ToTable("SysPasswordPolicy", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysPrinter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("GroupCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_SysPrinter_Active");

                    b.HasIndex(new[] { "Name" }, "uk_SysPrinter_Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("SysPrinter", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PasswordPolicyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PasswordPolicyId");

                    b.HasIndex(new[] { "Active" }, "idx_SysRole_Active");

                    b.HasIndex(new[] { "Description" }, "uk_SysRole_Description")
                        .IsUnique();

                    b.ToTable("SysRole", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysScript", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("ScriptType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_SysScript_Active");

                    b.HasIndex(new[] { "ScriptType", "Name" }, "uk_SysScript_TypeName")
                        .IsUnique();

                    b.ToTable("SysScript", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("SessionCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SpId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "idx_SysSession_User");

                    b.ToTable("SysSession", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("BossId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DefaultErpFirmId")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultErpId")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultWarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("DisabledMenuCodes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EnabledMenuCodes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Idmusername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IDMUsername");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PasswordPolicyId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PrinterId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("ScriptId")
                        .HasColumnType("int");

                    b.Property<short>("Sso")
                        .HasColumnType("smallint")
                        .HasColumnName("SSO");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short?>("TerminalLanguage")
                        .HasColumnType("smallint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BossId");

                    b.HasIndex("DefaultErpFirmId");

                    b.HasIndex("DefaultErpId");

                    b.HasIndex("DefaultWarehouseId");

                    b.HasIndex("PasswordPolicyId");

                    b.HasIndex(new[] { "Active" }, "idx_SysUser_Active");

                    b.HasIndex(new[] { "PrinterId" }, "idx_SysUser_Printer");

                    b.HasIndex(new[] { "RoleId" }, "idx_SysUser_Role");

                    b.HasIndex(new[] { "ScriptId" }, "idx_SysUser_Script");

                    b.HasIndex(new[] { "UserName" }, "uk_SysUser_UserName")
                        .IsUnique();

                    b.ToTable("SysUser", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysUserWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ErpFirmId")
                        .HasColumnType("int");

                    b.Property<int>("ErpId")
                        .HasColumnType("int");

                    b.Property<short>("InputOutputRight")
                        .HasColumnType("smallint");

                    b.Property<short>("IsDefault")
                        .HasColumnType("smallint");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ErpFirmId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "UserId", "WarehouseId", "ErpFirmId" }, "uk_SysUserWarehouse_UserFirm")
                        .IsUnique();

                    b.ToTable("SysUserWarehouse", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CostGroup")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Depth")
                        .HasColumnType("numeric(28,8)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<int?>("FactoryId")
                        .HasColumnType("int");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Height")
                        .HasColumnType("numeric(28,8)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric(28,8)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_SysWarehouse_Active");

                    b.HasIndex(new[] { "Code", "Name" }, "idx_SysWarehouse_CodeName");

                    b.HasIndex(new[] { "DepartmentId" }, "idx_SysWarehouse_Department");

                    b.HasIndex(new[] { "DivisionId" }, "idx_SysWarehouse_Division");

                    b.HasIndex(new[] { "FactoryId" }, "idx_SysWarehouse_Factory");

                    b.ToTable("SysWarehouse", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysWarehouseBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<short>("BlockCount")
                        .HasColumnType("smallint");

                    b.Property<short>("BlockType")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Depth")
                        .HasColumnType("numeric(28,8)");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Direction")
                        .HasColumnType("smallint");

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Height")
                        .HasColumnType("numeric(28,8)");

                    b.Property<short>("LocationX")
                        .HasColumnType("smallint");

                    b.Property<short>("LocationY")
                        .HasColumnType("smallint");

                    b.Property<short>("LocationZ")
                        .HasColumnType("smallint");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric(28,8)");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.HasIndex(new[] { "Active" }, "idx_SysWarehouseBlock_Active");

                    b.HasIndex(new[] { "WarehouseId", "FloorId", "Code" }, "uk_SysWarehouseBlock_Code")
                        .IsUnique();

                    b.ToTable("SysWarehouseBlock", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysWarehouseFloor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Active" }, "idx_SysWarehouseFloor_Active");

                    b.HasIndex(new[] { "Code", "WarehouseId" }, "uk_SysWarehouseFloor_CodeId")
                        .IsUnique();

                    b.ToTable("SysWarehouseFloor", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysWarehouseZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("AuthCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("SecurityLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Active" }, "idx_SysWarehouseZone_Active");

                    b.HasIndex(new[] { "Code", "WarehouseId", "FloorId" }, "uk_SysWarehouseZone_CodeId")
                        .IsUnique();

                    b.ToTable("SysWarehouseZone", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.TransactionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ArpId")
                        .HasColumnType("int");

                    b.Property<int?>("ChildContainerId")
                        .HasColumnType("int");

                    b.Property<int?>("ContainerId")
                        .HasColumnType("int");

                    b.Property<decimal>("ConvFactor1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(28,8)")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("ConvFactor2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(28,8)")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<short>("IoCode")
                        .HasColumnType("smallint");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LineDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LineDay")
                        .HasColumnType("datetime");

                    b.Property<short>("LineType")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderSlipId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderSlipLineId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentLineId")
                        .HasColumnType("int");

                    b.Property<int?>("PlanningSlipId")
                        .HasColumnType("int");

                    b.Property<int?>("PlanningSlipLineId")
                        .HasColumnType("int");

                    b.Property<int?>("ProdOrderLineId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProductionDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(28,8)");

                    b.Property<int?>("ReservationLineId")
                        .HasColumnType("int");

                    b.Property<int?>("ReservationSlipId")
                        .HasColumnType("int");

                    b.Property<int?>("SlipId")
                        .HasColumnType("int");

                    b.Property<int?>("SlipLineId")
                        .HasColumnType("int");

                    b.Property<short>("TrCode")
                        .HasColumnType("smallint");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("VariantId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkOrderLineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContainerId", "LineType", "Active", "WarehouseId" }, "idx_TransactionDetail1");

                    b.HasIndex(new[] { "LineType", "Active", "ItemId", "AddressId", "ContainerId" }, "idx_TransactionDetail2");

                    b.HasIndex(new[] { "WarehouseId", "ItemId", "Active", "LineType" }, "idx_TransactionDetail3");

                    b.HasIndex(new[] { "TrCode", "WorkOrderId", "Active" }, "idx_TransactionDetail4");

                    b.HasIndex(new[] { "Active" }, "idx_TransactionDetail_Active");

                    b.HasIndex(new[] { "AddressId" }, "idx_TransactionDetail_Address");

                    b.HasIndex(new[] { "ChildContainerId" }, "idx_TransactionDetail_ChildContainer");

                    b.HasIndex(new[] { "ContainerId" }, "idx_TransactionDetail_Container");

                    b.HasIndex(new[] { "ItemId" }, "idx_TransactionDetail_Item");

                    b.HasIndex(new[] { "OrderSlipId" }, "idx_TransactionDetail_Order");

                    b.HasIndex(new[] { "OrderSlipLineId" }, "idx_TransactionDetail_OrderLine");

                    b.HasIndex(new[] { "PlanningSlipId" }, "idx_TransactionDetail_Planning");

                    b.HasIndex(new[] { "PlanningSlipLineId" }, "idx_TransactionDetail_PlanningLine");

                    b.HasIndex(new[] { "ProductionOrderId" }, "idx_TransactionDetail_ProdOrder");

                    b.HasIndex(new[] { "ProdOrderLineId" }, "idx_TransactionDetail_ProdOrderLine");

                    b.HasIndex(new[] { "ReservationSlipId" }, "idx_TransactionDetail_Reservation");

                    b.HasIndex(new[] { "ReservationLineId" }, "idx_TransactionDetail_ReservationLine");

                    b.HasIndex(new[] { "SlipId" }, "idx_TransactionDetail_Slip");

                    b.HasIndex(new[] { "SlipLineId" }, "idx_TransactionDetail_SlipLine");

                    b.HasIndex(new[] { "IoCode", "LineType", "LineDate" }, "idx_TransactionDetail_TypeDate");

                    b.HasIndex(new[] { "UnitId" }, "idx_TransactionDetail_Unit");

                    b.HasIndex(new[] { "VariantId" }, "idx_TransactionDetail_Variant");

                    b.HasIndex(new[] { "WarehouseId" }, "idx_TransactionDetail_Warehouse");

                    b.HasIndex(new[] { "WorkOrderId" }, "idx_TransactionDetail_WorkOrder");

                    b.HasIndex(new[] { "WorkOrderLineId" }, "idx_TransactionDetail_WorkOrderLine");

                    b.ToTable("TransactionDetail", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.TransactionDetailView", b =>
                {
                    b.Property<decimal?>("ActualStock")
                        .HasColumnType("numeric(38,6)");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<long?>("Cnt")
                        .HasColumnType("bigint")
                        .HasColumnName("cnt");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LineDay")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("PurchaseOrder")
                        .HasColumnType("numeric(38,6)");

                    b.Property<decimal?>("ReserveStock")
                        .HasColumnType("numeric(38,6)");

                    b.Property<decimal?>("SalesOrder")
                        .HasColumnType("numeric(38,6)");

                    b.Property<decimal?>("TotalInboundOrders")
                        .HasColumnType("numeric(38,6)");

                    b.Property<decimal?>("TotalInboundPlanning")
                        .HasColumnType("numeric(38,6)");

                    b.Property<decimal?>("TotalOutboundOrders")
                        .HasColumnType("numeric(38,6)");

                    b.Property<decimal?>("TotalOutboundPlanning")
                        .HasColumnType("numeric(38,6)");

                    b.Property<decimal?>("TotalProductionOrders")
                        .HasColumnType("numeric(38,6)");

                    b.Property<decimal?>("TotalProductionPlanning")
                        .HasColumnType("numeric(38,6)");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("VariantId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.ToView("TransactionDetailView");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.UnitBarcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ArpId")
                        .HasColumnType("int");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("BarcodeType")
                        .HasColumnType("smallint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArpId");

                    b.HasIndex("ItemId");

                    b.HasIndex(new[] { "Active" }, "idx_UnitBarcode_Active");

                    b.HasIndex(new[] { "UnitId", "ItemId" }, "idx_UnitBarcode_Unit");

                    b.ToTable("UnitBarcode", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.VariantTotalsView", b =>
                {
                    b.Property<decimal?>("ActualStock")
                        .HasColumnType("numeric(38,6)");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("VariantId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.ToView("VariantTotalsView");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.VariantTrackingTotalsView", b =>
                {
                    b.Property<decimal?>("ActualStock")
                        .HasColumnType("numeric(38,6)");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("VariantId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.ToView("VariantTrackingTotalsView");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal?>("Area")
                        .HasColumnType("numeric(28,8)");

                    b.Property<string>("Brand")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Depth")
                        .HasColumnType("numeric(28,8)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("Height")
                        .HasColumnType("numeric(28,8)");

                    b.Property<string>("Model")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Owner")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlateNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PlateNumber2")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PlateNumber3")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("numeric(28,8)");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric(28,8)");

                    b.Property<string>("Year")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Active" }, "idx_Vehicle_Active");

                    b.HasIndex(new[] { "Code" }, "idx_Vehicle_Code");

                    b.HasIndex(new[] { "Code", "Name", "PlateNumber" }, "idx_Vehicle_CodeName");

                    b.ToTable("Vehicle", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ArpId")
                        .HasColumnType("int");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CarrierId")
                        .HasColumnType("int");

                    b.Property<int?>("CompletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CustomSlipTypeId")
                        .HasColumnType("int");

                    b.Property<string>("DeclarationNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("DeliveryArpId")
                        .HasColumnType("int");

                    b.Property<int?>("Department2Id")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DispatchNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("Division2Id")
                        .HasColumnType("int");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<int?>("Factory2Id")
                        .HasColumnType("int");

                    b.Property<int?>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrderSlipId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentWorkOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("PlanningSlipId")
                        .HasColumnType("int");

                    b.Property<int>("PrintCount")
                        .HasColumnType("int");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint");

                    b.Property<int?>("ProdOrderLineId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesPersonId")
                        .HasColumnType("int");

                    b.Property<int?>("ShipmentAddressId")
                        .HasColumnType("int");

                    b.Property<string>("ShipmentNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("SlipDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SlipNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("SlipType")
                        .HasColumnType("smallint");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int?>("Warehouse2Id")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_WorkOrder_Active");

                    b.HasIndex(new[] { "ShipmentAddressId" }, "idx_WorkOrder_Address");

                    b.HasIndex(new[] { "ArpId" }, "idx_WorkOrder_Arp");

                    b.HasIndex(new[] { "CustomSlipTypeId" }, "idx_WorkOrder_CustomType");

                    b.HasIndex(new[] { "DeliveryArpId" }, "idx_WorkOrder_DeliveryArp");

                    b.HasIndex(new[] { "DepartmentId" }, "idx_WorkOrder_Department");

                    b.HasIndex(new[] { "DivisionId" }, "idx_WorkOrder_Division");

                    b.HasIndex(new[] { "DriverId" }, "idx_WorkOrder_Driver");

                    b.HasIndex(new[] { "FactoryId" }, "idx_WorkOrder_Factory");

                    b.HasIndex(new[] { "OrderSlipId" }, "idx_WorkOrder_OrderSlip");

                    b.HasIndex(new[] { "PlanningSlipId" }, "idx_WorkOrder_PlanningSlip");

                    b.HasIndex(new[] { "ProdOrderLineId" }, "idx_WorkOrder_ProdOrderLine");

                    b.HasIndex(new[] { "ProductionOrderId" }, "idx_WorkOrder_ProductionOrder");

                    b.HasIndex(new[] { "ProjectId" }, "idx_WorkOrder_Project");

                    b.HasIndex(new[] { "SalesPersonId" }, "idx_WorkOrder_SalesPerson");

                    b.HasIndex(new[] { "StateId" }, "idx_WorkOrder_State");

                    b.HasIndex(new[] { "SlipType", "SlipDate" }, "idx_WorkOrder_TypeDate");

                    b.HasIndex(new[] { "VehicleId" }, "idx_WorkOrder_Vehicle");

                    b.HasIndex(new[] { "WarehouseId" }, "idx_WorkOrder_Warehouse");

                    b.HasIndex(new[] { "Warehouse2Id" }, "idx_WorkOrder_Warehouse2");

                    b.HasIndex(new[] { "SlipType", "SlipNumber" }, "uk_WorkOrder_TypeNumber")
                        .IsUnique();

                    b.ToTable("WorkOrder", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.WorkOrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("Address2Id")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ArpId")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ChildContainer2Id")
                        .HasColumnType("int");

                    b.Property<int?>("ChildContainerId")
                        .HasColumnType("int");

                    b.Property<short>("Closed")
                        .HasColumnType("smallint");

                    b.Property<int?>("Container2Id")
                        .HasColumnType("int");

                    b.Property<int?>("ContainerId")
                        .HasColumnType("int");

                    b.Property<decimal>("ConvFactor1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(28,8)")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("ConvFactor2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(28,8)")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Department2Id")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Division2Id")
                        .HasColumnType("int");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<int?>("Factory2Id")
                        .HasColumnType("int");

                    b.Property<int?>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LineDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrderSlipLineId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentLineId")
                        .HasColumnType("int");

                    b.Property<int?>("PlanningSlipLineId")
                        .HasColumnType("int");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint");

                    b.Property<int?>("ProdOrderLineId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyBarcode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(28,8)");

                    b.Property<int?>("ShipmentAddressId")
                        .HasColumnType("int");

                    b.Property<int>("SlipId")
                        .HasColumnType("int");

                    b.Property<short>("SlipType")
                        .HasColumnType("smallint");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("VariantId")
                        .HasColumnType("int");

                    b.Property<int?>("Warehouse2Id")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Active" }, "idx_WorkOrderLine_Active");

                    b.HasIndex(new[] { "AddressId" }, "idx_WorkOrderLine_Address");

                    b.HasIndex(new[] { "Address2Id" }, "idx_WorkOrderLine_Address2");

                    b.HasIndex(new[] { "ArpId" }, "idx_WorkOrderLine_Arp");

                    b.HasIndex(new[] { "ChildContainerId" }, "idx_WorkOrderLine_ChildContainer");

                    b.HasIndex(new[] { "ChildContainer2Id" }, "idx_WorkOrderLine_ChildContainer2");

                    b.HasIndex(new[] { "ContainerId" }, "idx_WorkOrderLine_Container");

                    b.HasIndex(new[] { "Container2Id" }, "idx_WorkOrderLine_Container2");

                    b.HasIndex(new[] { "LineDate", "SlipType" }, "idx_WorkOrderLine_DateType");

                    b.HasIndex(new[] { "ItemId" }, "idx_WorkOrderLine_Item");

                    b.HasIndex(new[] { "OrderSlipLineId" }, "idx_WorkOrderLine_OrderSlip");

                    b.HasIndex(new[] { "PlanningSlipLineId" }, "idx_WorkOrderLine_PlanningSlip");

                    b.HasIndex(new[] { "ProdOrderLineId" }, "idx_WorkOrderLine_ProdOrder");

                    b.HasIndex(new[] { "ProjectId" }, "idx_WorkOrderLine_Project");

                    b.HasIndex(new[] { "SlipId" }, "idx_WorkOrderLine_SlipId");

                    b.HasIndex(new[] { "StateId" }, "idx_WorkOrderLine_State");

                    b.HasIndex(new[] { "UnitId" }, "idx_WorkOrderLine_Unit");

                    b.HasIndex(new[] { "AssignedTo" }, "idx_WorkOrderLine_User");

                    b.HasIndex(new[] { "VariantId" }, "idx_WorkOrderLine_Variant");

                    b.HasIndex(new[] { "WarehouseId" }, "idx_WorkOrderLine_Warehouse");

                    b.HasIndex(new[] { "Warehouse2Id" }, "idx_WorkOrderLine_Warehouse2");

                    b.ToTable("WorkOrderLine", (string)null);
                });

            modelBuilder.Entity("Wms.Integration.Core.Entities.Concrete.UserOperationClaim", b =>
                {
                    b.HasOne("Wms.Integration.Core.Entities.Concrete.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wms.Integration.Core.Entities.Concrete.User", "User")
                        .WithMany("OperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.AddressItem", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysAddress", "Address")
                        .WithMany("AddressItems")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_AddressItem_AddressId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "Item")
                        .WithMany("AddressItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_AddressItem_ItemId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse")
                        .WithMany("AddressItems")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("fk_AddressItem_WarehouseId");

                    b.Navigation("Address");

                    b.Navigation("Item");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Container", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysContainerType", "ContainerType")
                        .WithMany("Containers")
                        .HasForeignKey("ContainerTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_Container_ContainerTypeId");

                    b.Navigation("ContainerType");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Decomposition", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.DecompositionShelf", "DecompositionShelf")
                        .WithMany("Decompositions")
                        .HasForeignKey("DecompositionShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DecompositionShelf");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.DecompositionLine", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.DecompositionShelves", "DecompositionShelves")
                        .WithMany("DecompositionLines")
                        .HasForeignKey("DecompositionShelvesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wms.Integration.Entities.Concrete.OrderSlipLine", "SlipLine")
                        .WithMany("DecompositionLines")
                        .HasForeignKey("SlipLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DecompositionShelves");

                    b.Navigation("SlipLine");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.DecompositionShelves", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.DecompositionShelf", "DecompositionShelfs")
                        .WithMany("DecompositionShelves")
                        .HasForeignKey("DecompositionShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DecompositionShelfs");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Driver", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysUser", "User")
                        .WithMany("Drivers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_Driver_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.FormLayout", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysRole", "Role")
                        .WithMany("FormLayouts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_FormLayout_RoleId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysUser", "User")
                        .WithMany("FormLayouts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_FormLayout_UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Item", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "ParentItem")
                        .WithMany("InverseParentItem")
                        .HasForeignKey("ParentItemId")
                        .HasConstraintName("fk_Item_ParentItemId");

                    b.Navigation("ParentItem");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ItemClassRelation", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "Class")
                        .WithMany("ItemClassRelationClasses")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("fk_ItemClassRelation_ClassId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "Item")
                        .WithMany("ItemClassRelationItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ItemClassRelation_ItemId");

                    b.Navigation("Class");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ItemContent", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "Item")
                        .WithMany("ItemContentItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ItemContent_ItemId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "ParentItem")
                        .WithMany("ItemContentParentItems")
                        .HasForeignKey("ParentItemId")
                        .IsRequired()
                        .HasConstraintName("fk_ItemContent_ParentItemId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ItemUnit", "Unit")
                        .WithMany("ItemContents")
                        .HasForeignKey("UnitId")
                        .IsRequired()
                        .HasConstraintName("fk_ItemContent_UnitId");

                    b.Navigation("Item");

                    b.Navigation("ParentItem");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ItemParameter", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "Item")
                        .WithMany("ItemParameters")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ItemParameter_ItemId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse")
                        .WithMany("ItemParameters")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("fk_ItemParameter_WarehouseId");

                    b.Navigation("Item");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ItemUnit", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "Item")
                        .WithMany("ItemUnits")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ItemUnit_ItemId");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.OrderSlip", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.Arp", "Arp")
                        .WithMany("OrderSlipArps")
                        .HasForeignKey("ArpId")
                        .HasConstraintName("fk_OrderSlip_ArpId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Carrier", "Carrier")
                        .WithMany("OrderSlips")
                        .HasForeignKey("CarrierId")
                        .HasConstraintName("fk_OrderSlip_CarrierId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Arp", "DeliveryArp")
                        .WithMany("OrderSlipDeliveryArps")
                        .HasForeignKey("DeliveryArpId")
                        .HasConstraintName("fk_OrderSlip_DeliveryArpId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysDepartment", "Department")
                        .WithMany("OrderSlips")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_OrderSlip_DepartmentId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysDivision", "Division")
                        .WithMany("OrderSlips")
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("fk_OrderSlip_DivisionId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysFactory", "Factory")
                        .WithMany("OrderSlips")
                        .HasForeignKey("FactoryId")
                        .HasConstraintName("fk_OrderSlip_FactoryId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Project", "Project")
                        .WithMany("OrderSlips")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_OrderSlip_ProjectId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SalesPerson", "SalesPerson")
                        .WithMany("OrderSlips")
                        .HasForeignKey("SalesPersonId")
                        .HasConstraintName("fk_OrderSlip_SalesPersonId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ShipmentAddress", "ShipmentAddress")
                        .WithMany("OrderSlips")
                        .HasForeignKey("ShipmentAddressId")
                        .HasConstraintName("fk_OrderSlip_ShipmentAddressId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysCustomState", "State")
                        .WithMany("OrderSlips")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("fk_OrderSlip_StateId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Vehicle", "Vehicle")
                        .WithMany("OrderSlips")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("fk_OrderSlip_VehicleId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse2")
                        .WithMany("OrderSlipWarehouse2s")
                        .HasForeignKey("Warehouse2Id")
                        .HasConstraintName("fk_OrderSlip_Warehouse2Id");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse")
                        .WithMany("OrderSlipWarehouses")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fk_OrderSlip_WarehouseId");

                    b.Navigation("Arp");

                    b.Navigation("Carrier");

                    b.Navigation("DeliveryArp");

                    b.Navigation("Department");

                    b.Navigation("Division");

                    b.Navigation("Factory");

                    b.Navigation("Project");

                    b.Navigation("SalesPerson");

                    b.Navigation("ShipmentAddress");

                    b.Navigation("State");

                    b.Navigation("Vehicle");

                    b.Navigation("Warehouse");

                    b.Navigation("Warehouse2");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.OrderSlipLine", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.Arp", "Arp")
                        .WithMany("OrderSlipLines")
                        .HasForeignKey("ArpId")
                        .HasConstraintName("fk_OrderSlipLine_ArpId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysUser", "AssignedToNavigation")
                        .WithMany("OrderSlipLines")
                        .HasForeignKey("AssignedTo")
                        .HasConstraintName("fk_OrderSlipLine_AssignedTo");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysDepartment", "Department")
                        .WithMany("OrderSlipLines")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_OrderSlipLine_DepartmentId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "Item")
                        .WithMany("OrderSlipLineItems")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("fk_OrderSlipLine_ItemId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Project", "Project")
                        .WithMany("OrderSlipLines")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_OrderSlipLine_ProjectId");

                    b.HasOne("Wms.Integration.Entities.Concrete.OrderSlip", "Slip")
                        .WithMany("OrderSlipLines")
                        .HasForeignKey("SlipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_OrderSlipLine_SlipId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysCustomState", "State")
                        .WithMany("OrderSlipLines")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("fk_OrderSlipLine_StateId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ItemUnit", "Unit")
                        .WithMany("OrderSlipLines")
                        .HasForeignKey("UnitId")
                        .IsRequired()
                        .HasConstraintName("fk_OrderSlipLine_UnitId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "Variant")
                        .WithMany("OrderSlipLineVariants")
                        .HasForeignKey("VariantId")
                        .HasConstraintName("fk_OrderSlipLine_VariantId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse2")
                        .WithMany("OrderSlipLineWarehouse2s")
                        .HasForeignKey("Warehouse2Id")
                        .HasConstraintName("fk_OrderSlipLine_Warehouse2Id");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse")
                        .WithMany("OrderSlipLineWarehouses")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("fk_OrderSlipLine_WarehouseId");

                    b.Navigation("Arp");

                    b.Navigation("AssignedToNavigation");

                    b.Navigation("Department");

                    b.Navigation("Item");

                    b.Navigation("Project");

                    b.Navigation("Slip");

                    b.Navigation("State");

                    b.Navigation("Unit");

                    b.Navigation("Variant");

                    b.Navigation("Warehouse");

                    b.Navigation("Warehouse2");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.PlanningSlip", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.Arp", "Arp")
                        .WithMany("PlanningSlipArps")
                        .HasForeignKey("ArpId")
                        .HasConstraintName("fk_PlanningSlip_ArpId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Arp", "DeliveryArp")
                        .WithMany("PlanningSlipDeliveryArps")
                        .HasForeignKey("DeliveryArpId")
                        .HasConstraintName("fk_PlanningSlip_DeliveryArpId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysDepartment", "Department")
                        .WithMany("PlanningSlips")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_PlanningSlip_DepartmentId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysDivision", "Division")
                        .WithMany("PlanningSlips")
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("fk_PlanningSlip_DivisionId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Driver", "Driver")
                        .WithMany("PlanningSlips")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("fk_PlanningSlip_DriverId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysFactory", "Factory")
                        .WithMany("PlanningSlips")
                        .HasForeignKey("FactoryId")
                        .HasConstraintName("fk_PlanningSlip_FactoryId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SalesPerson", "SalesPerson")
                        .WithMany("PlanningSlips")
                        .HasForeignKey("SalesPersonId")
                        .HasConstraintName("fk_PlanningSlip_SalesPersonId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ShipmentAddress", "ShipmentAddress")
                        .WithMany("PlanningSlips")
                        .HasForeignKey("ShipmentAddressId")
                        .HasConstraintName("fk_PlanningSlip_ShipmentAddressId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysCustomState", "State")
                        .WithMany("PlanningSlips")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("fk_PlanningSlip_StateId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Vehicle", "Vehicle")
                        .WithMany("PlanningSlips")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("fk_PlanningSlip_VehicleId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse2")
                        .WithMany("PlanningSlipWarehouse2s")
                        .HasForeignKey("Warehouse2Id")
                        .HasConstraintName("fk_PlanningSlip_Warehouse2Id");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse")
                        .WithMany("PlanningSlipWarehouses")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fk_PlanningSlip_WarehouseId");

                    b.Navigation("Arp");

                    b.Navigation("DeliveryArp");

                    b.Navigation("Department");

                    b.Navigation("Division");

                    b.Navigation("Driver");

                    b.Navigation("Factory");

                    b.Navigation("SalesPerson");

                    b.Navigation("ShipmentAddress");

                    b.Navigation("State");

                    b.Navigation("Vehicle");

                    b.Navigation("Warehouse");

                    b.Navigation("Warehouse2");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.PlanningSlipLine", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysAddress", "Address2")
                        .WithMany("PlanningSlipLineAddress2s")
                        .HasForeignKey("Address2Id")
                        .HasConstraintName("fk_PlanningSlipLine_Address2Id");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysAddress", "Address")
                        .WithMany("PlanningSlipLineAddresses")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_PlanningSlipLine_AddressId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Arp", "Arp")
                        .WithMany("PlanningSlipLines")
                        .HasForeignKey("ArpId")
                        .IsRequired()
                        .HasConstraintName("fk_PlanningSlipLine_ArpId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysUser", "AssignedToNavigation")
                        .WithMany("PlanningSlipLines")
                        .HasForeignKey("AssignedTo")
                        .HasConstraintName("fk_PlanningSlipLine_AssignedTo");

                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "Item")
                        .WithMany("PlanningSlipLineItems")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("fk_PlanningSlipLine_ItemId");

                    b.HasOne("Wms.Integration.Entities.Concrete.PlanningSlip", "Slip")
                        .WithMany("PlanningSlipLines")
                        .HasForeignKey("SlipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_PlanningSlipLine_SlipId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysCustomState", "State")
                        .WithMany("PlanningSlipLines")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("fk_PlanningSlipLine_StateId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ItemUnit", "Unit")
                        .WithMany("PlanningSlipLines")
                        .HasForeignKey("UnitId")
                        .IsRequired()
                        .HasConstraintName("fk_PlanningSlipLine_UnitId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "Variant")
                        .WithMany("PlanningSlipLineVariants")
                        .HasForeignKey("VariantId")
                        .HasConstraintName("fk_PlanningSlipLine_VariantId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse2")
                        .WithMany("PlanningSlipLineWarehouse2s")
                        .HasForeignKey("Warehouse2Id")
                        .HasConstraintName("fk_PlanningSlipLine_Warehouse2Id");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse")
                        .WithMany("PlanningSlipLineWarehouses")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("fk_PlanningSlipLine_WarehouseId");

                    b.Navigation("Address");

                    b.Navigation("Address2");

                    b.Navigation("Arp");

                    b.Navigation("AssignedToNavigation");

                    b.Navigation("Item");

                    b.Navigation("Slip");

                    b.Navigation("State");

                    b.Navigation("Unit");

                    b.Navigation("Variant");

                    b.Navigation("Warehouse");

                    b.Navigation("Warehouse2");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ProductionOrder", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.Arp", "Arp")
                        .WithMany("ProductionOrders")
                        .HasForeignKey("ArpId")
                        .HasConstraintName("fk_ProductionOrder_ArpId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysFactory", "Factory")
                        .WithMany("ProductionOrders")
                        .HasForeignKey("FactoryId")
                        .HasConstraintName("fk_ProductionOrder_FactoryId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "Item")
                        .WithMany("ProductionOrders")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("fk_ProductionOrder_ItemId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Project", "Project")
                        .WithMany("ProductionOrders")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_ProductionOrder_ProjectId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ItemUnit", "Unit")
                        .WithMany("ProductionOrders")
                        .HasForeignKey("UnitId")
                        .IsRequired()
                        .HasConstraintName("fk_ProductionOrder_UnitId");

                    b.Navigation("Arp");

                    b.Navigation("Factory");

                    b.Navigation("Item");

                    b.Navigation("Project");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ProductionOrderLine", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.Arp", "Arp")
                        .WithMany("ProductionOrderLines")
                        .HasForeignKey("ArpId")
                        .HasConstraintName("fk_ProductionOrderLine_ArpId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysFactory", "Factory")
                        .WithMany("ProductionOrderLines")
                        .HasForeignKey("FactoryId")
                        .HasConstraintName("fk_ProductionOrderLine_FactoryId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "Item")
                        .WithMany("ProductionOrderLineItems")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("fk_ProductionOrderLine_ItemId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Project", "Project")
                        .WithMany("ProductionOrderLines")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_ProductionOrderLine_ProjectId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ProductionOrder", "Slip")
                        .WithMany("ProductionOrderLines")
                        .HasForeignKey("SlipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ProductionOrderLine_SlipId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ItemUnit", "Unit")
                        .WithMany("ProductionOrderLines")
                        .HasForeignKey("UnitId")
                        .IsRequired()
                        .HasConstraintName("fk_ProductionOrderLine_UnitId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "Variant")
                        .WithMany("ProductionOrderLineVariants")
                        .HasForeignKey("VariantId")
                        .HasConstraintName("fk_ProductionOrderLine_VariantId");

                    b.Navigation("Arp");

                    b.Navigation("Factory");

                    b.Navigation("Item");

                    b.Navigation("Project");

                    b.Navigation("Slip");

                    b.Navigation("Unit");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ReservationSlip", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.OrderSlip", "OrderSlip")
                        .WithMany("ReservationSlips")
                        .HasForeignKey("OrderSlipId")
                        .HasConstraintName("fk_ReservationSlip_OrderSlipId");

                    b.HasOne("Wms.Integration.Entities.Concrete.PlanningSlip", "PlanningSlip")
                        .WithMany("ReservationSlips")
                        .HasForeignKey("PlanningSlipId")
                        .HasConstraintName("fk_ReservationSlip_PlanningSlipId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ProductionOrder", "ProductionOrder")
                        .WithMany("ReservationSlips")
                        .HasForeignKey("ProductionOrderId")
                        .HasConstraintName("fk_ReservationSlip_ProductionOrderId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysCustomState", "State")
                        .WithMany("ReservationSlips")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("fk_ReservationSlip_StateId");

                    b.HasOne("Wms.Integration.Entities.Concrete.WorkOrder", "WorkOrder")
                        .WithMany("ReservationSlips")
                        .HasForeignKey("WorkOrderId")
                        .HasConstraintName("fk_ReservationSlip_WorkOrderId");

                    b.Navigation("OrderSlip");

                    b.Navigation("PlanningSlip");

                    b.Navigation("ProductionOrder");

                    b.Navigation("State");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ReservationSlipLine", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysAddress", "Address")
                        .WithMany("ReservationSlipLines")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_ReservationSlipLine_AddressId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Arp", "Arp")
                        .WithMany("ReservationSlipLines")
                        .HasForeignKey("ArpId")
                        .HasConstraintName("fk_ReservationSlipLine_ArpId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysBlockingType", "BlockingType")
                        .WithMany("ReservationSlipLines")
                        .HasForeignKey("BlockingTypeId")
                        .HasConstraintName("fk_ReservationSlipLine_BlockingTypeId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Container", "ChildContainer")
                        .WithMany("ReservationSlipLineChildContainers")
                        .HasForeignKey("ChildContainerId")
                        .HasConstraintName("fk_ReservationSlipLine_ChildContainerId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Container", "Container")
                        .WithMany("ReservationSlipLineContainers")
                        .HasForeignKey("ContainerId")
                        .HasConstraintName("fk_ReservationSlipLine_ContainerId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "Item")
                        .WithMany("ReservationSlipLineItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fk_ReservationSlipLine_ItemId");

                    b.HasOne("Wms.Integration.Entities.Concrete.OrderSlipLine", "OrderSlipLine")
                        .WithMany("ReservationSlipLines")
                        .HasForeignKey("OrderSlipLineId")
                        .HasConstraintName("fk_ReservationSlipLine_OrderSlipLineId");

                    b.HasOne("Wms.Integration.Entities.Concrete.PlanningSlipLine", "PlanningSlipLine")
                        .WithMany("ReservationSlipLines")
                        .HasForeignKey("PlanningSlipLineId")
                        .HasConstraintName("fk_ReservationSlipLine_PlanningSlipLineId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ProductionOrderLine", "ProdOrderLine")
                        .WithMany("ReservationSlipLines")
                        .HasForeignKey("ProdOrderLineId")
                        .HasConstraintName("fk_ReservationSlipLine_ProdOrderLineId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ReservationSlip", "Slip")
                        .WithMany("ReservationSlipLines")
                        .HasForeignKey("SlipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ReservationSlipLine_SlipId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysCustomState", "State")
                        .WithMany("ReservationSlipLines")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("fk_ReservationSlipLine_StateId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ItemUnit", "Unit")
                        .WithMany("ReservationSlipLines")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("fk_ReservationSlipLine_UnitId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "Variant")
                        .WithMany("ReservationSlipLineVariants")
                        .HasForeignKey("VariantId")
                        .HasConstraintName("fk_ReservationSlipLine_VariantId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse")
                        .WithMany("ReservationSlipLines")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("fk_ReservationSlipLine_WarehouseId");

                    b.HasOne("Wms.Integration.Entities.Concrete.WorkOrderLine", "WorkOrderLine")
                        .WithMany("ReservationSlipLines")
                        .HasForeignKey("WorkOrderLineId")
                        .HasConstraintName("fk_ReservationSlipLine_WorkOrderLineId");

                    b.Navigation("Address");

                    b.Navigation("Arp");

                    b.Navigation("BlockingType");

                    b.Navigation("ChildContainer");

                    b.Navigation("Container");

                    b.Navigation("Item");

                    b.Navigation("OrderSlipLine");

                    b.Navigation("PlanningSlipLine");

                    b.Navigation("ProdOrderLine");

                    b.Navigation("Slip");

                    b.Navigation("State");

                    b.Navigation("Unit");

                    b.Navigation("Variant");

                    b.Navigation("Warehouse");

                    b.Navigation("WorkOrderLine");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Shift", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse")
                        .WithMany("Shifts")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fk_Shift_WarehouseId");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ShipmentDay", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.Arp", "Arp")
                        .WithMany("ShipmentDays")
                        .HasForeignKey("ArpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_ShipmentDay_ArpId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ShipmentAddress", "ShipmentAddress")
                        .WithMany("ShipmentDays")
                        .HasForeignKey("ShipmentAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_ShipmentDay_ShipmentAddressId");

                    b.Navigation("Arp");

                    b.Navigation("ShipmentAddress");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Slip", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.Arp", "Arp")
                        .WithMany("SlipArps")
                        .HasForeignKey("ArpId")
                        .HasConstraintName("fk_Slip_ArpId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysCustomSlipType", "CustomSlipType")
                        .WithMany("Slips")
                        .HasForeignKey("CustomSlipTypeId")
                        .HasConstraintName("fk_Slip_CustomSlipTypeId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Arp", "DeliveryArp")
                        .WithMany("SlipDeliveryArps")
                        .HasForeignKey("DeliveryArpId")
                        .HasConstraintName("fk_Slip_DeliveryArpId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysDepartment", "Department")
                        .WithMany("Slips")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_Slip_DepartmentId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysDivision", "Division")
                        .WithMany("Slips")
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("fk_Slip_DivisionId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Driver", "Driver")
                        .WithMany("Slips")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("fk_Slip_DriverId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysFactory", "Factory")
                        .WithMany("Slips")
                        .HasForeignKey("FactoryId")
                        .HasConstraintName("fk_Slip_FactoryId");

                    b.HasOne("Wms.Integration.Entities.Concrete.OrderSlip", "OrderSlip")
                        .WithMany("Slips")
                        .HasForeignKey("OrderSlipId")
                        .HasConstraintName("fk_Slip_OrderSlipId");

                    b.HasOne("Wms.Integration.Entities.Concrete.PlanningSlip", "PlanningSlip")
                        .WithMany("Slips")
                        .HasForeignKey("PlanningSlipId")
                        .HasConstraintName("fk_Slip_PlanningSlipId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ProductionOrder", "ProductionOrder")
                        .WithMany("Slips")
                        .HasForeignKey("ProductionOrderId")
                        .HasConstraintName("fk_Slip_ProductionOrderId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Project", "Project")
                        .WithMany("Slips")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_Slip_ProjectId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SalesPerson", "SalesPerson")
                        .WithMany("Slips")
                        .HasForeignKey("SalesPersonId")
                        .HasConstraintName("fk_Slip_SalesPersonId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ShipmentAddress", "ShipmentAddress")
                        .WithMany("Slips")
                        .HasForeignKey("ShipmentAddressId")
                        .HasConstraintName("fk_Slip_ShipmentAddressId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysCustomState", "State")
                        .WithMany("Slips")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("fk_Slip_StateId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Vehicle", "Vehicle")
                        .WithMany("Slips")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("fk_Slip_VehicleId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse2")
                        .WithMany("SlipWarehouse2s")
                        .HasForeignKey("Warehouse2Id")
                        .HasConstraintName("fk_Slip_Warehouse2Id");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse")
                        .WithMany("SlipWarehouses")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("fk_Slip_WarehouseId");

                    b.HasOne("Wms.Integration.Entities.Concrete.WorkOrder", "WorkOrder")
                        .WithMany("Slips")
                        .HasForeignKey("WorkOrderId")
                        .IsRequired()
                        .HasConstraintName("fk_Slip_WorkOrderId");

                    b.Navigation("Arp");

                    b.Navigation("CustomSlipType");

                    b.Navigation("DeliveryArp");

                    b.Navigation("Department");

                    b.Navigation("Division");

                    b.Navigation("Driver");

                    b.Navigation("Factory");

                    b.Navigation("OrderSlip");

                    b.Navigation("PlanningSlip");

                    b.Navigation("ProductionOrder");

                    b.Navigation("Project");

                    b.Navigation("SalesPerson");

                    b.Navigation("ShipmentAddress");

                    b.Navigation("State");

                    b.Navigation("Vehicle");

                    b.Navigation("Warehouse");

                    b.Navigation("Warehouse2");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SlipLine", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysAddress", "Address2")
                        .WithMany("SlipLineAddress2s")
                        .HasForeignKey("Address2Id")
                        .HasConstraintName("fk_SlipLine_Address2Id");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysAddress", "Address")
                        .WithMany("SlipLineAddresses")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("fk_SlipLine_AddressId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Arp", "Arp")
                        .WithMany("SlipLines")
                        .HasForeignKey("ArpId")
                        .HasConstraintName("fk_SlipLine_ArpId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysUser", "AssignedToNavigation")
                        .WithMany("SlipLines")
                        .HasForeignKey("AssignedTo")
                        .HasConstraintName("fk_SlipLine_AssignedTo");

                    b.HasOne("Wms.Integration.Entities.Concrete.Container", "ChildContainer2")
                        .WithMany("SlipLineChildContainer2s")
                        .HasForeignKey("ChildContainer2Id")
                        .HasConstraintName("fk_SlipLine_ChildContainer2Id");

                    b.HasOne("Wms.Integration.Entities.Concrete.Container", "ChildContainer")
                        .WithMany("SlipLineChildContainers")
                        .HasForeignKey("ChildContainerId")
                        .HasConstraintName("fk_SlipLine_ChildContainerId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Container", "Container2")
                        .WithMany("SlipLineContainer2s")
                        .HasForeignKey("Container2Id")
                        .HasConstraintName("fk_SlipLine_Container2Id");

                    b.HasOne("Wms.Integration.Entities.Concrete.Container", "Container")
                        .WithMany("SlipLineContainers")
                        .HasForeignKey("ContainerId")
                        .HasConstraintName("fk_SlipLine_ContainerId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "Item")
                        .WithMany("SlipLineItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fk_SlipLine_ItemId");

                    b.HasOne("Wms.Integration.Entities.Concrete.OrderSlipLine", "OrderSlipLine")
                        .WithMany("SlipLines")
                        .HasForeignKey("OrderSlipLineId")
                        .HasConstraintName("fk_SlipLine_OrderSlipLineId");

                    b.HasOne("Wms.Integration.Entities.Concrete.PlanningSlipLine", "PlanningSlipLine")
                        .WithMany("SlipLines")
                        .HasForeignKey("PlanningSlipLineId")
                        .HasConstraintName("fk_SlipLine_PlanningSlipLineId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ProductionOrderLine", "ProdOrderLine")
                        .WithMany("SlipLines")
                        .HasForeignKey("ProdOrderLineId")
                        .HasConstraintName("fk_SlipLine_ProdOrderLineId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Project", "Project")
                        .WithMany("SlipLines")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_SlipLine_ProjectId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Slip", "Slip")
                        .WithMany("SlipLines")
                        .HasForeignKey("SlipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_SlipLine_SlipId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysCustomState", "State")
                        .WithMany("SlipLines")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("fk_SlipLine_StateId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ItemUnit", "Unit")
                        .WithMany("SlipLines")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("fk_SlipLine_UnitId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "Variant")
                        .WithMany("SlipLineVariants")
                        .HasForeignKey("VariantId")
                        .HasConstraintName("fk_SlipLine_VariantId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse2")
                        .WithMany("SlipLineWarehouse2s")
                        .HasForeignKey("Warehouse2Id")
                        .HasConstraintName("fk_SlipLine_Warehouse2Id");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse")
                        .WithMany("SlipLineWarehouses")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("fk_SlipLine_WarehouseId");

                    b.HasOne("Wms.Integration.Entities.Concrete.WorkOrderLine", "WorkOrderLine")
                        .WithMany("SlipLines")
                        .HasForeignKey("WorkOrderLineId")
                        .IsRequired()
                        .HasConstraintName("fk_SlipLine_WorkOrderLineId");

                    b.Navigation("Address");

                    b.Navigation("Address2");

                    b.Navigation("Arp");

                    b.Navigation("AssignedToNavigation");

                    b.Navigation("ChildContainer");

                    b.Navigation("ChildContainer2");

                    b.Navigation("Container");

                    b.Navigation("Container2");

                    b.Navigation("Item");

                    b.Navigation("OrderSlipLine");

                    b.Navigation("PlanningSlipLine");

                    b.Navigation("ProdOrderLine");

                    b.Navigation("Project");

                    b.Navigation("Slip");

                    b.Navigation("State");

                    b.Navigation("Unit");

                    b.Navigation("Variant");

                    b.Navigation("Warehouse");

                    b.Navigation("Warehouse2");

                    b.Navigation("WorkOrderLine");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysAddress", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouseFloor", "Floor")
                        .WithMany("SysAddresses")
                        .HasForeignKey("FloorId")
                        .HasConstraintName("fk_SysAddress_FloorId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse")
                        .WithMany("SysAddresses")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("fk_SysAddress_WarehouseId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouseZone", "Zone")
                        .WithMany("SysAddresses")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("fk_SysAddress_ZoneId");

                    b.Navigation("Floor");

                    b.Navigation("Warehouse");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysAuthCode", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysRole", "Role")
                        .WithMany("SysAuthCodes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_SysAuthCode_RoleId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysUser", "User")
                        .WithMany("SysAuthCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_SysAuthCode_UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysBlockingException", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysBlockingType", "BlockingType")
                        .WithMany("SysBlockingExceptions")
                        .HasForeignKey("BlockingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_SysBlockingException_Type");

                    b.Navigation("BlockingType");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysContainerRelation", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysContainerType", "Child")
                        .WithMany("SysContainerRelationChildren")
                        .HasForeignKey("ChildId")
                        .IsRequired()
                        .HasConstraintName("fk_SysContainerRelation_ChildId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysContainerType", "Parent")
                        .WithMany("SysContainerRelationParents")
                        .HasForeignKey("ParentId")
                        .IsRequired()
                        .HasConstraintName("fk_SysContainerRelation_ParentId");

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysCustomListColumn", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysCustomReport", "Report")
                        .WithMany("SysCustomListColumns")
                        .HasForeignKey("ReportId")
                        .HasConstraintName("fk_SysCustomListColumn_ReportId");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysCustomRuleAction", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysCustomRule", "Rule")
                        .WithMany("SysCustomRuleActions")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_SysCustomRuleAction_RuleId");

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysErpFirm", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysErp", "Erp")
                        .WithMany("SysErpFirms")
                        .HasForeignKey("ErpId")
                        .IsRequired()
                        .HasConstraintName("fk_SysErpFirm_ErpId");

                    b.Navigation("Erp");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysErpIntegration", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysErpFirm", "ErpFirm")
                        .WithMany("SysErpIntegrations")
                        .HasForeignKey("ErpFirmId")
                        .IsRequired()
                        .HasConstraintName("fk_SysErpIntegration_FirmId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysErp", "Erp")
                        .WithMany("SysErpIntegrations")
                        .HasForeignKey("ErpId")
                        .IsRequired()
                        .HasConstraintName("fk_SysErpIntegration_ErpId");

                    b.Navigation("Erp");

                    b.Navigation("ErpFirm");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysFactory", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysDivision", "Division")
                        .WithMany("SysFactories")
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("fk_SysFactory_DivisionId");

                    b.Navigation("Division");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysMenuRight", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysRole", "Role")
                        .WithMany("SysMenuRights")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_SysMenuRight_RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysNetLock", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysUser", "CreatedByNavigation")
                        .WithMany("SysNetLocks")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_SysNetLock_CreatedBy");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysPasswordHistory", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysUser", "User")
                        .WithMany("SysPasswordHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_SysPasswordHistory_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysRole", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysPasswordPolicy", "PasswordPolicy")
                        .WithMany("SysRoles")
                        .HasForeignKey("PasswordPolicyId")
                        .HasConstraintName("fk_SysRole_PolicyId");

                    b.Navigation("PasswordPolicy");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysSession", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysUser", "User")
                        .WithMany("SysSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_SysSession_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysUser", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysUser", "Boss")
                        .WithMany("InverseBoss")
                        .HasForeignKey("BossId")
                        .HasConstraintName("fk_SysUser_BossId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysErpFirm", "DefaultErpFirm")
                        .WithMany("SysUsers")
                        .HasForeignKey("DefaultErpFirmId")
                        .HasConstraintName("fk_SysUser_FirmId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysErp", "DefaultErp")
                        .WithMany("SysUsers")
                        .HasForeignKey("DefaultErpId")
                        .HasConstraintName("fk_SysUser_ErpId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "DefaultWarehouse")
                        .WithMany("SysUsers")
                        .HasForeignKey("DefaultWarehouseId")
                        .HasConstraintName("fk_SysUser_WarehouseId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysPasswordPolicy", "PasswordPolicy")
                        .WithMany("SysUsers")
                        .HasForeignKey("PasswordPolicyId")
                        .HasConstraintName("fk_SysUser_PolicyId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysPrinter", "Printer")
                        .WithMany("SysUsers")
                        .HasForeignKey("PrinterId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_SysUser_PrinterId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysRole", "Role")
                        .WithMany("SysUsers")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("fk_SysUser_RoleId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysScript", "Script")
                        .WithMany("SysUsers")
                        .HasForeignKey("ScriptId")
                        .HasConstraintName("fk_SysUser_ScriptId");

                    b.Navigation("Boss");

                    b.Navigation("DefaultErp");

                    b.Navigation("DefaultErpFirm");

                    b.Navigation("DefaultWarehouse");

                    b.Navigation("PasswordPolicy");

                    b.Navigation("Printer");

                    b.Navigation("Role");

                    b.Navigation("Script");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysUserWarehouse", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysErpFirm", "ErpFirm")
                        .WithMany("SysUserWarehouses")
                        .HasForeignKey("ErpFirmId")
                        .IsRequired()
                        .HasConstraintName("fk_SysUserWarehouse_FirmId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysUser", "User")
                        .WithMany("SysUserWarehouses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_SysUserWarehouse_UserId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse")
                        .WithMany("SysUserWarehouses")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("fk_SysUserWarehouse_WarehouseId");

                    b.Navigation("ErpFirm");

                    b.Navigation("User");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysWarehouse", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysDepartment", "Department")
                        .WithMany("SysWarehouses")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_SysWarehouse_DepartmentId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysDivision", "Division")
                        .WithMany("SysWarehouses")
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("fk_SysWarehouse_DivisionId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysFactory", "Factory")
                        .WithMany("SysWarehouses")
                        .HasForeignKey("FactoryId")
                        .HasConstraintName("fk_SysWarehouse_FactoryId");

                    b.Navigation("Department");

                    b.Navigation("Division");

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysWarehouseBlock", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouseFloor", "Floor")
                        .WithMany("SysWarehouseBlocks")
                        .HasForeignKey("FloorId")
                        .IsRequired()
                        .HasConstraintName("fk_SysWarehouseBlock_FloorId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse")
                        .WithMany("SysWarehouseBlocks")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("fk_SysWarehouseBlock_WarehouseId");

                    b.Navigation("Floor");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysWarehouseFloor", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse")
                        .WithMany("SysWarehouseFloors")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("fk_SysWarehouseFloor_WarehouseId");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysWarehouseZone", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouseFloor", "Floor")
                        .WithMany("SysWarehouseZones")
                        .HasForeignKey("FloorId")
                        .IsRequired()
                        .HasConstraintName("fk_SysWarehouseZone_FloorId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse")
                        .WithMany("SysWarehouseZones")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("fk_SysWarehouseZone_WarehouseId");

                    b.Navigation("Floor");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.TransactionDetail", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.OrderSlipLine", "OrderSlipLine")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("OrderSlipLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_TransactionDetail_OrderSlipLineId");

                    b.HasOne("Wms.Integration.Entities.Concrete.PlanningSlipLine", "PlanningSlipLine")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("PlanningSlipLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_TransactionDetail_PlanningSlipLineId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ProductionOrderLine", "ProdOrderLine")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("ProdOrderLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_TransactionDetail_ProdOrderLineId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ReservationSlipLine", "ReservationLine")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("ReservationLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_TransactionDetail_ReservationLineId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SlipLine", "SlipLine")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("SlipLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_TransactionDetail_SlipLineId");

                    b.HasOne("Wms.Integration.Entities.Concrete.WorkOrderLine", "WorkOrderLine")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("WorkOrderLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_TransactionDetail_WorkOrderLineId");

                    b.Navigation("OrderSlipLine");

                    b.Navigation("PlanningSlipLine");

                    b.Navigation("ProdOrderLine");

                    b.Navigation("ReservationLine");

                    b.Navigation("SlipLine");

                    b.Navigation("WorkOrderLine");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.UnitBarcode", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.Arp", "Arp")
                        .WithMany("UnitBarcodes")
                        .HasForeignKey("ArpId")
                        .HasConstraintName("fk_UnitBarcode_ArpId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "Item")
                        .WithMany("UnitBarcodes")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("fk_UnitBarcode_ItemId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ItemUnit", "Unit")
                        .WithMany("UnitBarcodes")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_UnitBarcode_UnitId");

                    b.Navigation("Arp");

                    b.Navigation("Item");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Vehicle", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse")
                        .WithMany("Vehicles")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fk_Vehicle_WarehouseId");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.WorkOrder", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.Arp", "Arp")
                        .WithMany("WorkOrderArps")
                        .HasForeignKey("ArpId")
                        .HasConstraintName("fk_WorkOrder_ArpId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysCustomSlipType", "CustomSlipType")
                        .WithMany("WorkOrders")
                        .HasForeignKey("CustomSlipTypeId")
                        .HasConstraintName("fk_WorkOrder_CustomSlipTypeId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Arp", "DeliveryArp")
                        .WithMany("WorkOrderDeliveryArps")
                        .HasForeignKey("DeliveryArpId")
                        .HasConstraintName("fk_WorkOrder_DeliveryArpId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysDepartment", "Department")
                        .WithMany("WorkOrders")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_WorkOrder_DepartmentId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysDivision", "Division")
                        .WithMany("WorkOrders")
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("fk_WorkOrder_DivisionId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Driver", "Driver")
                        .WithMany("WorkOrders")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("fk_WorkOrder_DriverId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysFactory", "Factory")
                        .WithMany("WorkOrders")
                        .HasForeignKey("FactoryId")
                        .HasConstraintName("fk_WorkOrder_FactoryId");

                    b.HasOne("Wms.Integration.Entities.Concrete.OrderSlip", "OrderSlip")
                        .WithMany("WorkOrders")
                        .HasForeignKey("OrderSlipId")
                        .HasConstraintName("fk_WorkOrder_OrderSlipId");

                    b.HasOne("Wms.Integration.Entities.Concrete.PlanningSlip", "PlanningSlip")
                        .WithMany("WorkOrders")
                        .HasForeignKey("PlanningSlipId")
                        .HasConstraintName("fk_WorkOrder_PlanningSlipId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ProductionOrderLine", "ProdOrderLine")
                        .WithMany("WorkOrders")
                        .HasForeignKey("ProdOrderLineId")
                        .HasConstraintName("fk_WorkOrder_ProdOrderLineId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ProductionOrder", "ProductionOrder")
                        .WithMany("WorkOrders")
                        .HasForeignKey("ProductionOrderId")
                        .HasConstraintName("fk_WorkOrder_ProductionOrderId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Project", "Project")
                        .WithMany("WorkOrders")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_WorkOrder_ProjectId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SalesPerson", "SalesPerson")
                        .WithMany("WorkOrders")
                        .HasForeignKey("SalesPersonId")
                        .HasConstraintName("fk_WorkOrder_SalesPersonId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ShipmentAddress", "ShipmentAddress")
                        .WithMany("WorkOrders")
                        .HasForeignKey("ShipmentAddressId")
                        .HasConstraintName("fk_WorkOrder_ShipmentAddressId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysCustomState", "State")
                        .WithMany("WorkOrders")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("fk_WorkOrder_StateId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Vehicle", "Vehicle")
                        .WithMany("WorkOrders")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("fk_WorkOrder_VehicleId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse2")
                        .WithMany("WorkOrderWarehouse2s")
                        .HasForeignKey("Warehouse2Id")
                        .HasConstraintName("fk_WorkOrder_Warehouse2Id");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse")
                        .WithMany("WorkOrderWarehouses")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("fk_WorkOrder_WarehouseId");

                    b.Navigation("Arp");

                    b.Navigation("CustomSlipType");

                    b.Navigation("DeliveryArp");

                    b.Navigation("Department");

                    b.Navigation("Division");

                    b.Navigation("Driver");

                    b.Navigation("Factory");

                    b.Navigation("OrderSlip");

                    b.Navigation("PlanningSlip");

                    b.Navigation("ProdOrderLine");

                    b.Navigation("ProductionOrder");

                    b.Navigation("Project");

                    b.Navigation("SalesPerson");

                    b.Navigation("ShipmentAddress");

                    b.Navigation("State");

                    b.Navigation("Vehicle");

                    b.Navigation("Warehouse");

                    b.Navigation("Warehouse2");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.WorkOrderLine", b =>
                {
                    b.HasOne("Wms.Integration.Entities.Concrete.SysAddress", "Address2")
                        .WithMany("WorkOrderLineAddress2s")
                        .HasForeignKey("Address2Id")
                        .HasConstraintName("fk_WorkOrderLine_Address2Id");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysAddress", "Address")
                        .WithMany("WorkOrderLineAddresses")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_WorkOrderLine_AddressId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Arp", "Arp")
                        .WithMany("WorkOrderLines")
                        .HasForeignKey("ArpId")
                        .HasConstraintName("fk_WorkOrderLine_ArpId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysUser", "AssignedToNavigation")
                        .WithMany("WorkOrderLines")
                        .HasForeignKey("AssignedTo")
                        .HasConstraintName("fk_WorkOrderLine_AssignedTo");

                    b.HasOne("Wms.Integration.Entities.Concrete.Container", "ChildContainer2")
                        .WithMany("WorkOrderLineChildContainer2s")
                        .HasForeignKey("ChildContainer2Id")
                        .HasConstraintName("fk_WorkOrderLine_ChildContainer2Id");

                    b.HasOne("Wms.Integration.Entities.Concrete.Container", "ChildContainer")
                        .WithMany("WorkOrderLineChildContainers")
                        .HasForeignKey("ChildContainerId")
                        .HasConstraintName("fk_WorkOrderLine_ChildContainerId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Container", "Container2")
                        .WithMany("WorkOrderLineContainer2s")
                        .HasForeignKey("Container2Id")
                        .HasConstraintName("fk_WorkOrderLine_Container2Id");

                    b.HasOne("Wms.Integration.Entities.Concrete.Container", "Container")
                        .WithMany("WorkOrderLineContainers")
                        .HasForeignKey("ContainerId")
                        .HasConstraintName("fk_WorkOrderLine_ContainerId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "Item")
                        .WithMany("WorkOrderLineItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fk_WorkOrderLine_ItemId");

                    b.HasOne("Wms.Integration.Entities.Concrete.OrderSlipLine", "OrderSlipLine")
                        .WithMany("WorkOrderLines")
                        .HasForeignKey("OrderSlipLineId")
                        .HasConstraintName("fk_WorkOrderLine_OrderSlipLineId");

                    b.HasOne("Wms.Integration.Entities.Concrete.PlanningSlipLine", "PlanningSlipLine")
                        .WithMany("WorkOrderLines")
                        .HasForeignKey("PlanningSlipLineId")
                        .HasConstraintName("fk_WorkOrderLine_PlanningSlipLineId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ProductionOrderLine", "ProdOrderLine")
                        .WithMany("WorkOrderLines")
                        .HasForeignKey("ProdOrderLineId")
                        .HasConstraintName("fk_WorkOrderLine_ProdOrderLineId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Project", "Project")
                        .WithMany("WorkOrderLines")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_WorkOrderLine_ProjectId");

                    b.HasOne("Wms.Integration.Entities.Concrete.WorkOrder", "Slip")
                        .WithMany("WorkOrderLines")
                        .HasForeignKey("SlipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_WorkOrderLine_SlipId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysCustomState", "State")
                        .WithMany("WorkOrderLines")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("fk_WorkOrderLine_StateId");

                    b.HasOne("Wms.Integration.Entities.Concrete.ItemUnit", "Unit")
                        .WithMany("WorkOrderLines")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("fk_WorkOrderLine_UnitId");

                    b.HasOne("Wms.Integration.Entities.Concrete.Item", "Variant")
                        .WithMany("WorkOrderLineVariants")
                        .HasForeignKey("VariantId")
                        .HasConstraintName("fk_WorkOrderLine_VariantId");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse2")
                        .WithMany("WorkOrderLineWarehouse2s")
                        .HasForeignKey("Warehouse2Id")
                        .HasConstraintName("fk_WorkOrderLine_Warehouse2Id");

                    b.HasOne("Wms.Integration.Entities.Concrete.SysWarehouse", "Warehouse")
                        .WithMany("WorkOrderLineWarehouses")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("fk_WorkOrderLine_WarehouseId");

                    b.Navigation("Address");

                    b.Navigation("Address2");

                    b.Navigation("Arp");

                    b.Navigation("AssignedToNavigation");

                    b.Navigation("ChildContainer");

                    b.Navigation("ChildContainer2");

                    b.Navigation("Container");

                    b.Navigation("Container2");

                    b.Navigation("Item");

                    b.Navigation("OrderSlipLine");

                    b.Navigation("PlanningSlipLine");

                    b.Navigation("ProdOrderLine");

                    b.Navigation("Project");

                    b.Navigation("Slip");

                    b.Navigation("State");

                    b.Navigation("Unit");

                    b.Navigation("Variant");

                    b.Navigation("Warehouse");

                    b.Navigation("Warehouse2");
                });

            modelBuilder.Entity("Wms.Integration.Core.Entities.Concrete.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Wms.Integration.Core.Entities.Concrete.User", b =>
                {
                    b.Navigation("OperationClaims");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Arp", b =>
                {
                    b.Navigation("OrderSlipArps");

                    b.Navigation("OrderSlipDeliveryArps");

                    b.Navigation("OrderSlipLines");

                    b.Navigation("PlanningSlipArps");

                    b.Navigation("PlanningSlipDeliveryArps");

                    b.Navigation("PlanningSlipLines");

                    b.Navigation("ProductionOrderLines");

                    b.Navigation("ProductionOrders");

                    b.Navigation("ReservationSlipLines");

                    b.Navigation("ShipmentDays");

                    b.Navigation("SlipArps");

                    b.Navigation("SlipDeliveryArps");

                    b.Navigation("SlipLines");

                    b.Navigation("UnitBarcodes");

                    b.Navigation("WorkOrderArps");

                    b.Navigation("WorkOrderDeliveryArps");

                    b.Navigation("WorkOrderLines");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Carrier", b =>
                {
                    b.Navigation("OrderSlips");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Container", b =>
                {
                    b.Navigation("ReservationSlipLineChildContainers");

                    b.Navigation("ReservationSlipLineContainers");

                    b.Navigation("SlipLineChildContainer2s");

                    b.Navigation("SlipLineChildContainers");

                    b.Navigation("SlipLineContainer2s");

                    b.Navigation("SlipLineContainers");

                    b.Navigation("WorkOrderLineChildContainer2s");

                    b.Navigation("WorkOrderLineChildContainers");

                    b.Navigation("WorkOrderLineContainer2s");

                    b.Navigation("WorkOrderLineContainers");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.DecompositionShelf", b =>
                {
                    b.Navigation("DecompositionShelves");

                    b.Navigation("Decompositions");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.DecompositionShelves", b =>
                {
                    b.Navigation("DecompositionLines");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Driver", b =>
                {
                    b.Navigation("PlanningSlips");

                    b.Navigation("Slips");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Item", b =>
                {
                    b.Navigation("AddressItems");

                    b.Navigation("InverseParentItem");

                    b.Navigation("ItemClassRelationClasses");

                    b.Navigation("ItemClassRelationItems");

                    b.Navigation("ItemContentItems");

                    b.Navigation("ItemContentParentItems");

                    b.Navigation("ItemParameters");

                    b.Navigation("ItemUnits");

                    b.Navigation("OrderSlipLineItems");

                    b.Navigation("OrderSlipLineVariants");

                    b.Navigation("PlanningSlipLineItems");

                    b.Navigation("PlanningSlipLineVariants");

                    b.Navigation("ProductionOrderLineItems");

                    b.Navigation("ProductionOrderLineVariants");

                    b.Navigation("ProductionOrders");

                    b.Navigation("ReservationSlipLineItems");

                    b.Navigation("ReservationSlipLineVariants");

                    b.Navigation("SlipLineItems");

                    b.Navigation("SlipLineVariants");

                    b.Navigation("UnitBarcodes");

                    b.Navigation("WorkOrderLineItems");

                    b.Navigation("WorkOrderLineVariants");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ItemUnit", b =>
                {
                    b.Navigation("ItemContents");

                    b.Navigation("OrderSlipLines");

                    b.Navigation("PlanningSlipLines");

                    b.Navigation("ProductionOrderLines");

                    b.Navigation("ProductionOrders");

                    b.Navigation("ReservationSlipLines");

                    b.Navigation("SlipLines");

                    b.Navigation("UnitBarcodes");

                    b.Navigation("WorkOrderLines");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.OrderSlip", b =>
                {
                    b.Navigation("OrderSlipLines");

                    b.Navigation("ReservationSlips");

                    b.Navigation("Slips");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.OrderSlipLine", b =>
                {
                    b.Navigation("DecompositionLines");

                    b.Navigation("ReservationSlipLines");

                    b.Navigation("SlipLines");

                    b.Navigation("TransactionDetails");

                    b.Navigation("WorkOrderLines");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.PlanningSlip", b =>
                {
                    b.Navigation("PlanningSlipLines");

                    b.Navigation("ReservationSlips");

                    b.Navigation("Slips");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.PlanningSlipLine", b =>
                {
                    b.Navigation("ReservationSlipLines");

                    b.Navigation("SlipLines");

                    b.Navigation("TransactionDetails");

                    b.Navigation("WorkOrderLines");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ProductionOrder", b =>
                {
                    b.Navigation("ProductionOrderLines");

                    b.Navigation("ReservationSlips");

                    b.Navigation("Slips");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ProductionOrderLine", b =>
                {
                    b.Navigation("ReservationSlipLines");

                    b.Navigation("SlipLines");

                    b.Navigation("TransactionDetails");

                    b.Navigation("WorkOrderLines");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Project", b =>
                {
                    b.Navigation("OrderSlipLines");

                    b.Navigation("OrderSlips");

                    b.Navigation("ProductionOrderLines");

                    b.Navigation("ProductionOrders");

                    b.Navigation("SlipLines");

                    b.Navigation("Slips");

                    b.Navigation("WorkOrderLines");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ReservationSlip", b =>
                {
                    b.Navigation("ReservationSlipLines");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ReservationSlipLine", b =>
                {
                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SalesPerson", b =>
                {
                    b.Navigation("OrderSlips");

                    b.Navigation("PlanningSlips");

                    b.Navigation("Slips");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.ShipmentAddress", b =>
                {
                    b.Navigation("OrderSlips");

                    b.Navigation("PlanningSlips");

                    b.Navigation("ShipmentDays");

                    b.Navigation("Slips");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Slip", b =>
                {
                    b.Navigation("SlipLines");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SlipLine", b =>
                {
                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysAddress", b =>
                {
                    b.Navigation("AddressItems");

                    b.Navigation("PlanningSlipLineAddress2s");

                    b.Navigation("PlanningSlipLineAddresses");

                    b.Navigation("ReservationSlipLines");

                    b.Navigation("SlipLineAddress2s");

                    b.Navigation("SlipLineAddresses");

                    b.Navigation("WorkOrderLineAddress2s");

                    b.Navigation("WorkOrderLineAddresses");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysBlockingType", b =>
                {
                    b.Navigation("ReservationSlipLines");

                    b.Navigation("SysBlockingExceptions");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysContainerType", b =>
                {
                    b.Navigation("Containers");

                    b.Navigation("SysContainerRelationChildren");

                    b.Navigation("SysContainerRelationParents");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysCustomReport", b =>
                {
                    b.Navigation("SysCustomListColumns");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysCustomRule", b =>
                {
                    b.Navigation("SysCustomRuleActions");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysCustomSlipType", b =>
                {
                    b.Navigation("Slips");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysCustomState", b =>
                {
                    b.Navigation("OrderSlipLines");

                    b.Navigation("OrderSlips");

                    b.Navigation("PlanningSlipLines");

                    b.Navigation("PlanningSlips");

                    b.Navigation("ReservationSlipLines");

                    b.Navigation("ReservationSlips");

                    b.Navigation("SlipLines");

                    b.Navigation("Slips");

                    b.Navigation("WorkOrderLines");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysDepartment", b =>
                {
                    b.Navigation("OrderSlipLines");

                    b.Navigation("OrderSlips");

                    b.Navigation("PlanningSlips");

                    b.Navigation("Slips");

                    b.Navigation("SysWarehouses");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysDivision", b =>
                {
                    b.Navigation("OrderSlips");

                    b.Navigation("PlanningSlips");

                    b.Navigation("Slips");

                    b.Navigation("SysFactories");

                    b.Navigation("SysWarehouses");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysErp", b =>
                {
                    b.Navigation("SysErpFirms");

                    b.Navigation("SysErpIntegrations");

                    b.Navigation("SysUsers");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysErpFirm", b =>
                {
                    b.Navigation("SysErpIntegrations");

                    b.Navigation("SysUserWarehouses");

                    b.Navigation("SysUsers");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysFactory", b =>
                {
                    b.Navigation("OrderSlips");

                    b.Navigation("PlanningSlips");

                    b.Navigation("ProductionOrderLines");

                    b.Navigation("ProductionOrders");

                    b.Navigation("Slips");

                    b.Navigation("SysWarehouses");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysPasswordPolicy", b =>
                {
                    b.Navigation("SysRoles");

                    b.Navigation("SysUsers");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysPrinter", b =>
                {
                    b.Navigation("SysUsers");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysRole", b =>
                {
                    b.Navigation("FormLayouts");

                    b.Navigation("SysAuthCodes");

                    b.Navigation("SysMenuRights");

                    b.Navigation("SysUsers");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysScript", b =>
                {
                    b.Navigation("SysUsers");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysUser", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("FormLayouts");

                    b.Navigation("InverseBoss");

                    b.Navigation("OrderSlipLines");

                    b.Navigation("PlanningSlipLines");

                    b.Navigation("SlipLines");

                    b.Navigation("SysAuthCodes");

                    b.Navigation("SysNetLocks");

                    b.Navigation("SysPasswordHistories");

                    b.Navigation("SysSessions");

                    b.Navigation("SysUserWarehouses");

                    b.Navigation("WorkOrderLines");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysWarehouse", b =>
                {
                    b.Navigation("AddressItems");

                    b.Navigation("ItemParameters");

                    b.Navigation("OrderSlipLineWarehouse2s");

                    b.Navigation("OrderSlipLineWarehouses");

                    b.Navigation("OrderSlipWarehouse2s");

                    b.Navigation("OrderSlipWarehouses");

                    b.Navigation("PlanningSlipLineWarehouse2s");

                    b.Navigation("PlanningSlipLineWarehouses");

                    b.Navigation("PlanningSlipWarehouse2s");

                    b.Navigation("PlanningSlipWarehouses");

                    b.Navigation("ReservationSlipLines");

                    b.Navigation("Shifts");

                    b.Navigation("SlipLineWarehouse2s");

                    b.Navigation("SlipLineWarehouses");

                    b.Navigation("SlipWarehouse2s");

                    b.Navigation("SlipWarehouses");

                    b.Navigation("SysAddresses");

                    b.Navigation("SysUserWarehouses");

                    b.Navigation("SysUsers");

                    b.Navigation("SysWarehouseBlocks");

                    b.Navigation("SysWarehouseFloors");

                    b.Navigation("SysWarehouseZones");

                    b.Navigation("Vehicles");

                    b.Navigation("WorkOrderLineWarehouse2s");

                    b.Navigation("WorkOrderLineWarehouses");

                    b.Navigation("WorkOrderWarehouse2s");

                    b.Navigation("WorkOrderWarehouses");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysWarehouseFloor", b =>
                {
                    b.Navigation("SysAddresses");

                    b.Navigation("SysWarehouseBlocks");

                    b.Navigation("SysWarehouseZones");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.SysWarehouseZone", b =>
                {
                    b.Navigation("SysAddresses");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.Vehicle", b =>
                {
                    b.Navigation("OrderSlips");

                    b.Navigation("PlanningSlips");

                    b.Navigation("Slips");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.WorkOrder", b =>
                {
                    b.Navigation("ReservationSlips");

                    b.Navigation("Slips");

                    b.Navigation("WorkOrderLines");
                });

            modelBuilder.Entity("Wms.Integration.Entities.Concrete.WorkOrderLine", b =>
                {
                    b.Navigation("ReservationSlipLines");

                    b.Navigation("SlipLines");

                    b.Navigation("TransactionDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
